module ext.render.opengl.api;


nothrow extern (C):

// GL_core
alias uint GLenum;
alias void GLvoid;
alias ubyte GLboolean;
alias uint GLbitfield;
alias char GLchar;
alias byte GLbyte;
alias short GLshort;
alias int GLint;
alias int GLsizei;
alias ubyte GLubyte;
alias ushort GLushort;
alias uint GLuint;
alias ushort GLhalf;
alias float GLfloat;
alias float GLclampf;
alias double GLdouble;
alias double GLclampd;
alias ptrdiff_t GLintptr;
alias ptrdiff_t GLsizeiptr;

// ARB_vertex_buffer_object
alias ptrdiff_t GLintptrARB;
alias ptrdiff_t GLsizeiptrARB;

// ARB_shader_objects
alias byte GLcharARB;
alias uint GLhandleARB;

// ARB_half_float_pixel
alias ushort GLhalfARB;

// NV_half_float
alias ushort GLhalfNV;

// EXT_timer_query
alias long GLint64EXT;
alias ulong GLuint64EXT;

// ARB_sync
alias long GLint64;
alias ulong GLuint64;
struct __GLsync;
alias __GLsync* GLsync;

// ARB_cl_event
struct _cl_context;
struct _cl_event;

// GL_ARB_debug_output
alias void function(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam) GLDEBUGPROCARB;

// GL_AMD_debug_output
alias void function(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam) GLDEBUGPROCAMD;

// GL_KHR_debug
alias void function(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam) GLDEBUGPROC;

// GL_NV_vdpau_interop
alias GLintptr GLvdpauSurfaceNV;



// VERSION_1_4
enum GLenum GL_BLEND_DST_RGB = 0x80C8;
enum GLenum GL_BLEND_SRC_RGB = 0x80C9;
enum GLenum GL_BLEND_DST_ALPHA = 0x80CA;
enum GLenum GL_BLEND_SRC_ALPHA = 0x80CB;
enum GLenum GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
enum GLenum GL_DEPTH_COMPONENT16 = 0x81A5;
enum GLenum GL_DEPTH_COMPONENT24 = 0x81A6;
enum GLenum GL_DEPTH_COMPONENT32 = 0x81A7;
enum GLenum GL_MIRRORED_REPEAT = 0x8370;
enum GLenum GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
enum GLenum GL_TEXTURE_LOD_BIAS = 0x8501;
enum GLenum GL_INCR_WRAP = 0x8507;
enum GLenum GL_DECR_WRAP = 0x8508;
enum GLenum GL_TEXTURE_DEPTH_SIZE = 0x884A;
enum GLenum GL_TEXTURE_COMPARE_MODE = 0x884C;
enum GLenum GL_TEXTURE_COMPARE_FUNC = 0x884D;

// KHR_debug
enum GLenum GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
enum GLenum GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
enum GLenum GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
enum GLenum GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
enum GLenum GL_DEBUG_SOURCE_API = 0x8246;
enum GLenum GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
enum GLenum GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
enum GLenum GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
enum GLenum GL_DEBUG_SOURCE_APPLICATION = 0x824A;
enum GLenum GL_DEBUG_SOURCE_OTHER = 0x824B;
enum GLenum GL_DEBUG_TYPE_ERROR = 0x824C;
enum GLenum GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
enum GLenum GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
enum GLenum GL_DEBUG_TYPE_PORTABILITY = 0x824F;
enum GLenum GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
enum GLenum GL_DEBUG_TYPE_OTHER = 0x8251;
enum GLenum GL_DEBUG_TYPE_MARKER = 0x8268;
enum GLenum GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
enum GLenum GL_DEBUG_TYPE_POP_GROUP = 0x826A;
enum GLenum GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
enum GLenum GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
enum GLenum GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
enum GLenum GL_BUFFER = 0x82E0;
enum GLenum GL_SHADER = 0x82E1;
enum GLenum GL_PROGRAM = 0x82E2;
enum GLenum GL_QUERY = 0x82E3;
enum GLenum GL_PROGRAM_PIPELINE = 0x82E4;
enum GLenum GL_SAMPLER = 0x82E6;
enum GLenum GL_DISPLAY_LIST = 0x82E7;
enum GLenum GL_MAX_LABEL_LENGTH = 0x82E8;
enum GLenum GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
enum GLenum GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
enum GLenum GL_DEBUG_LOGGED_MESSAGES = 0x9145;
enum GLenum GL_DEBUG_SEVERITY_HIGH = 0x9146;
enum GLenum GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
enum GLenum GL_DEBUG_SEVERITY_LOW = 0x9148;
enum GLenum GL_DEBUG_OUTPUT = 0x92E0;
enum GLenum GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;

// VERSION_1_5
enum GLenum GL_BUFFER_SIZE = 0x8764;
enum GLenum GL_BUFFER_USAGE = 0x8765;
enum GLenum GL_QUERY_COUNTER_BITS = 0x8864;
enum GLenum GL_CURRENT_QUERY = 0x8865;
enum GLenum GL_QUERY_RESULT = 0x8866;
enum GLenum GL_QUERY_RESULT_AVAILABLE = 0x8867;
enum GLenum GL_ARRAY_BUFFER = 0x8892;
enum GLenum GL_ELEMENT_ARRAY_BUFFER = 0x8893;
enum GLenum GL_ARRAY_BUFFER_BINDING = 0x8894;
enum GLenum GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum GLenum GL_READ_ONLY = 0x88B8;
enum GLenum GL_WRITE_ONLY = 0x88B9;
enum GLenum GL_READ_WRITE = 0x88BA;
enum GLenum GL_BUFFER_ACCESS = 0x88BB;
enum GLenum GL_BUFFER_MAPPED = 0x88BC;
enum GLenum GL_BUFFER_MAP_POINTER = 0x88BD;
enum GLenum GL_STREAM_DRAW = 0x88E0;
enum GLenum GL_STREAM_READ = 0x88E1;
enum GLenum GL_STREAM_COPY = 0x88E2;
enum GLenum GL_STATIC_DRAW = 0x88E4;
enum GLenum GL_STATIC_READ = 0x88E5;
enum GLenum GL_STATIC_COPY = 0x88E6;
enum GLenum GL_DYNAMIC_DRAW = 0x88E8;
enum GLenum GL_DYNAMIC_READ = 0x88E9;
enum GLenum GL_DYNAMIC_COPY = 0x88EA;
enum GLenum GL_SAMPLES_PASSED = 0x8914;

// ARB_texture_buffer_range
enum GLenum GL_TEXTURE_BUFFER_OFFSET = 0x919D;
enum GLenum GL_TEXTURE_BUFFER_SIZE = 0x919E;
enum GLenum GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;

// ARB_framebuffer_sRGB
enum GLenum GL_FRAMEBUFFER_SRGB = 0x8DB9;

// ARB_sample_shading
enum GLenum GL_SAMPLE_SHADING_ARB = 0x8C36;
enum GLenum GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;

// ARB_ES2_compatibility
enum GLenum GL_FIXED = 0x140C;
enum GLenum GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
enum GLenum GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
enum GLenum GL_LOW_FLOAT = 0x8DF0;
enum GLenum GL_MEDIUM_FLOAT = 0x8DF1;
enum GLenum GL_HIGH_FLOAT = 0x8DF2;
enum GLenum GL_LOW_INT = 0x8DF3;
enum GLenum GL_MEDIUM_INT = 0x8DF4;
enum GLenum GL_HIGH_INT = 0x8DF5;
enum GLenum GL_SHADER_COMPILER = 0x8DFA;
enum GLenum GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
enum GLenum GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
enum GLenum GL_MAX_VARYING_VECTORS = 0x8DFC;
enum GLenum GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
enum GLenum GL_RGB565 = 0x8D62;

// ARB_internalformat_query2
enum GLenum GL_INTERNALFORMAT_SUPPORTED = 0x826F;
enum GLenum GL_INTERNALFORMAT_PREFERRED = 0x8270;
enum GLenum GL_INTERNALFORMAT_RED_SIZE = 0x8271;
enum GLenum GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
enum GLenum GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
enum GLenum GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
enum GLenum GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
enum GLenum GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
enum GLenum GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
enum GLenum GL_INTERNALFORMAT_RED_TYPE = 0x8278;
enum GLenum GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
enum GLenum GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
enum GLenum GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
enum GLenum GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
enum GLenum GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
enum GLenum GL_MAX_WIDTH = 0x827E;
enum GLenum GL_MAX_HEIGHT = 0x827F;
enum GLenum GL_MAX_DEPTH = 0x8280;
enum GLenum GL_MAX_LAYERS = 0x8281;
enum GLenum GL_MAX_COMBINED_DIMENSIONS = 0x8282;
enum GLenum GL_COLOR_COMPONENTS = 0x8283;
enum GLenum GL_DEPTH_COMPONENTS = 0x8284;
enum GLenum GL_STENCIL_COMPONENTS = 0x8285;
enum GLenum GL_COLOR_RENDERABLE = 0x8286;
enum GLenum GL_DEPTH_RENDERABLE = 0x8287;
enum GLenum GL_STENCIL_RENDERABLE = 0x8288;
enum GLenum GL_FRAMEBUFFER_RENDERABLE = 0x8289;
enum GLenum GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
enum GLenum GL_FRAMEBUFFER_BLEND = 0x828B;
enum GLenum GL_READ_PIXELS = 0x828C;
enum GLenum GL_READ_PIXELS_FORMAT = 0x828D;
enum GLenum GL_READ_PIXELS_TYPE = 0x828E;
enum GLenum GL_TEXTURE_IMAGE_FORMAT = 0x828F;
enum GLenum GL_TEXTURE_IMAGE_TYPE = 0x8290;
enum GLenum GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
enum GLenum GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
enum GLenum GL_MIPMAP = 0x8293;
enum GLenum GL_MANUAL_GENERATE_MIPMAP = 0x8294;
enum GLenum GL_AUTO_GENERATE_MIPMAP = 0x8295;
enum GLenum GL_COLOR_ENCODING = 0x8296;
enum GLenum GL_SRGB_READ = 0x8297;
enum GLenum GL_SRGB_WRITE = 0x8298;
enum GLenum GL_SRGB_DECODE_ARB = 0x8299;
enum GLenum GL_FILTER = 0x829A;
enum GLenum GL_VERTEX_TEXTURE = 0x829B;
enum GLenum GL_TESS_CONTROL_TEXTURE = 0x829C;
enum GLenum GL_TESS_EVALUATION_TEXTURE = 0x829D;
enum GLenum GL_GEOMETRY_TEXTURE = 0x829E;
enum GLenum GL_FRAGMENT_TEXTURE = 0x829F;
enum GLenum GL_COMPUTE_TEXTURE = 0x82A0;
enum GLenum GL_TEXTURE_SHADOW = 0x82A1;
enum GLenum GL_TEXTURE_GATHER = 0x82A2;
enum GLenum GL_TEXTURE_GATHER_SHADOW = 0x82A3;
enum GLenum GL_SHADER_IMAGE_LOAD = 0x82A4;
enum GLenum GL_SHADER_IMAGE_STORE = 0x82A5;
enum GLenum GL_SHADER_IMAGE_ATOMIC = 0x82A6;
enum GLenum GL_IMAGE_TEXEL_SIZE = 0x82A7;
enum GLenum GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
enum GLenum GL_IMAGE_PIXEL_FORMAT = 0x82A9;
enum GLenum GL_IMAGE_PIXEL_TYPE = 0x82AA;
enum GLenum GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
enum GLenum GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
enum GLenum GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
enum GLenum GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
enum GLenum GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
enum GLenum GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
enum GLenum GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
enum GLenum GL_CLEAR_BUFFER = 0x82B4;
enum GLenum GL_TEXTURE_VIEW = 0x82B5;
enum GLenum GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
enum GLenum GL_FULL_SUPPORT = 0x82B7;
enum GLenum GL_CAVEAT_SUPPORT = 0x82B8;
enum GLenum GL_IMAGE_CLASS_4_X_32 = 0x82B9;
enum GLenum GL_IMAGE_CLASS_2_X_32 = 0x82BA;
enum GLenum GL_IMAGE_CLASS_1_X_32 = 0x82BB;
enum GLenum GL_IMAGE_CLASS_4_X_16 = 0x82BC;
enum GLenum GL_IMAGE_CLASS_2_X_16 = 0x82BD;
enum GLenum GL_IMAGE_CLASS_1_X_16 = 0x82BE;
enum GLenum GL_IMAGE_CLASS_4_X_8 = 0x82BF;
enum GLenum GL_IMAGE_CLASS_2_X_8 = 0x82C0;
enum GLenum GL_IMAGE_CLASS_1_X_8 = 0x82C1;
enum GLenum GL_IMAGE_CLASS_11_11_10 = 0x82C2;
enum GLenum GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
enum GLenum GL_VIEW_CLASS_128_BITS = 0x82C4;
enum GLenum GL_VIEW_CLASS_96_BITS = 0x82C5;
enum GLenum GL_VIEW_CLASS_64_BITS = 0x82C6;
enum GLenum GL_VIEW_CLASS_48_BITS = 0x82C7;
enum GLenum GL_VIEW_CLASS_32_BITS = 0x82C8;
enum GLenum GL_VIEW_CLASS_24_BITS = 0x82C9;
enum GLenum GL_VIEW_CLASS_16_BITS = 0x82CA;
enum GLenum GL_VIEW_CLASS_8_BITS = 0x82CB;
enum GLenum GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
enum GLenum GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
enum GLenum GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
enum GLenum GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
enum GLenum GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
enum GLenum GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
enum GLenum GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
enum GLenum GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;

// ARB_explicit_uniform_location
enum GLenum GL_MAX_UNIFORM_LOCATIONS = 0x826E;

// ARB_shading_language_include
enum GLenum GL_SHADER_INCLUDE_ARB = 0x8DAE;
enum GLenum GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
enum GLenum GL_NAMED_STRING_TYPE_ARB = 0x8DEA;

// ARB_separate_shader_objects
enum GLenum GL_VERTEX_SHADER_BIT = 0x00000001;
enum GLenum GL_FRAGMENT_SHADER_BIT = 0x00000002;
enum GLenum GL_GEOMETRY_SHADER_BIT = 0x00000004;
enum GLenum GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
enum GLenum GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
enum GLenum GL_ALL_SHADER_BITS = 0xFFFFFFFF;
enum GLenum GL_PROGRAM_SEPARABLE = 0x8258;
enum GLenum GL_ACTIVE_PROGRAM = 0x8259;
enum GLenum GL_PROGRAM_PIPELINE_BINDING = 0x825A;

// ARB_robustness
enum GLenum GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
enum GLenum GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
enum GLenum GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
enum GLenum GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
enum GLenum GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
enum GLenum GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
enum GLenum GL_NO_RESET_NOTIFICATION_ARB = 0x8261;

// ARB_shader_image_load_store
enum GLenum GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
enum GLenum GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
enum GLenum GL_UNIFORM_BARRIER_BIT = 0x00000004;
enum GLenum GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
enum GLenum GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
enum GLenum GL_COMMAND_BARRIER_BIT = 0x00000040;
enum GLenum GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
enum GLenum GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
enum GLenum GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
enum GLenum GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
enum GLenum GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
enum GLenum GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
enum GLenum GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
enum GLenum GL_MAX_IMAGE_UNITS = 0x8F38;
enum GLenum GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
enum GLenum GL_IMAGE_BINDING_NAME = 0x8F3A;
enum GLenum GL_IMAGE_BINDING_LEVEL = 0x8F3B;
enum GLenum GL_IMAGE_BINDING_LAYERED = 0x8F3C;
enum GLenum GL_IMAGE_BINDING_LAYER = 0x8F3D;
enum GLenum GL_IMAGE_BINDING_ACCESS = 0x8F3E;
enum GLenum GL_IMAGE_1D = 0x904C;
enum GLenum GL_IMAGE_2D = 0x904D;
enum GLenum GL_IMAGE_3D = 0x904E;
enum GLenum GL_IMAGE_2D_RECT = 0x904F;
enum GLenum GL_IMAGE_CUBE = 0x9050;
enum GLenum GL_IMAGE_BUFFER = 0x9051;
enum GLenum GL_IMAGE_1D_ARRAY = 0x9052;
enum GLenum GL_IMAGE_2D_ARRAY = 0x9053;
enum GLenum GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
enum GLenum GL_IMAGE_2D_MULTISAMPLE = 0x9055;
enum GLenum GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
enum GLenum GL_INT_IMAGE_1D = 0x9057;
enum GLenum GL_INT_IMAGE_2D = 0x9058;
enum GLenum GL_INT_IMAGE_3D = 0x9059;
enum GLenum GL_INT_IMAGE_2D_RECT = 0x905A;
enum GLenum GL_INT_IMAGE_CUBE = 0x905B;
enum GLenum GL_INT_IMAGE_BUFFER = 0x905C;
enum GLenum GL_INT_IMAGE_1D_ARRAY = 0x905D;
enum GLenum GL_INT_IMAGE_2D_ARRAY = 0x905E;
enum GLenum GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
enum GLenum GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
enum GLenum GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
enum GLenum GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
enum GLenum GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
enum GLenum GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
enum GLenum GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
enum GLenum GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
enum GLenum GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
enum GLenum GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
enum GLenum GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
enum GLenum GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
enum GLenum GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
enum GLenum GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
enum GLenum GL_MAX_IMAGE_SAMPLES = 0x906D;
enum GLenum GL_IMAGE_BINDING_FORMAT = 0x906E;
enum GLenum GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
enum GLenum GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
enum GLenum GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
enum GLenum GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
enum GLenum GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
enum GLenum GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
enum GLenum GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
enum GLenum GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
enum GLenum GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;

// ARB_timer_query
enum GLenum GL_TIME_ELAPSED = 0x88BF;
enum GLenum GL_TIMESTAMP = 0x8E28;

// ARB_get_program_binary
enum GLenum GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
enum GLenum GL_PROGRAM_BINARY_LENGTH = 0x8741;
enum GLenum GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
enum GLenum GL_PROGRAM_BINARY_FORMATS = 0x87FF;

// ARB_tessellation_shader
enum GLenum GL_PATCHES = 0x000E;
enum GLenum GL_PATCH_VERTICES = 0x8E72;
enum GLenum GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
enum GLenum GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
enum GLenum GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
enum GLenum GL_TESS_GEN_MODE = 0x8E76;
enum GLenum GL_TESS_GEN_SPACING = 0x8E77;
enum GLenum GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
enum GLenum GL_TESS_GEN_POINT_MODE = 0x8E79;
enum GLenum GL_ISOLINES = 0x8E7A;
enum GLenum GL_FRACTIONAL_ODD = 0x8E7B;
enum GLenum GL_FRACTIONAL_EVEN = 0x8E7C;
enum GLenum GL_MAX_PATCH_VERTICES = 0x8E7D;
enum GLenum GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
enum GLenum GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
enum GLenum GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
enum GLenum GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
enum GLenum GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
enum GLenum GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
enum GLenum GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
enum GLenum GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
enum GLenum GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
enum GLenum GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
enum GLenum GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
enum GLenum GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
enum GLenum GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
enum GLenum GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
enum GLenum GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
enum GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
enum GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
enum GLenum GL_TESS_EVALUATION_SHADER = 0x8E87;
enum GLenum GL_TESS_CONTROL_SHADER = 0x8E88;

// ARB_sync
enum GLenum GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
enum GLenum GL_OBJECT_TYPE = 0x9112;
enum GLenum GL_SYNC_CONDITION = 0x9113;
enum GLenum GL_SYNC_STATUS = 0x9114;
enum GLenum GL_SYNC_FLAGS = 0x9115;
enum GLenum GL_SYNC_FENCE = 0x9116;
enum GLenum GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
enum GLenum GL_UNSIGNALED = 0x9118;
enum GLenum GL_SIGNALED = 0x9119;
enum GLenum GL_ALREADY_SIGNALED = 0x911A;
enum GLenum GL_TIMEOUT_EXPIRED = 0x911B;
enum GLenum GL_CONDITION_SATISFIED = 0x911C;
enum GLenum GL_WAIT_FAILED = 0x911D;
enum GLenum GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
enum GLuint64 GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;

// ARB_texture_swizzle
enum GLenum GL_TEXTURE_SWIZZLE_R = 0x8E42;
enum GLenum GL_TEXTURE_SWIZZLE_G = 0x8E43;
enum GLenum GL_TEXTURE_SWIZZLE_B = 0x8E44;
enum GLenum GL_TEXTURE_SWIZZLE_A = 0x8E45;
enum GLenum GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;

// ARB_draw_indirect
enum GLenum GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
enum GLenum GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;

// ARB_cl_event
enum GLenum GL_SYNC_CL_EVENT_ARB = 0x8240;
enum GLenum GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;

// ARB_compute_shader
enum GLenum GL_COMPUTE_SHADER = 0x91B9;
enum GLenum GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
enum GLenum GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
enum GLenum GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
enum GLenum GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
enum GLenum GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
enum GLenum GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
enum GLenum GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
enum GLenum GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
enum GLenum GL_MAX_COMPUTE_LOCAL_INVOCATIONS = 0x90EB;
enum GLenum GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
enum GLenum GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
enum GLenum GL_COMPUTE_LOCAL_WORK_SIZE = 0x8267;
enum GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
enum GLenum GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
enum GLenum GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
enum GLenum GL_COMPUTE_SHADER_BIT = 0x00000020;

// ARB_internalformat_query
enum GLenum GL_NUM_SAMPLE_COUNTS = 0x9380;

// ARB_depth_clamp
enum GLenum GL_DEPTH_CLAMP = 0x864F;

// ARB_blend_func_extended
enum GLenum GL_SRC1_COLOR = 0x88F9;
enum GLenum GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
enum GLenum GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
enum GLenum GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;

// ARB_depth_buffer_float
enum GLenum GL_DEPTH_COMPONENT32F = 0x8CAC;
enum GLenum GL_DEPTH32F_STENCIL8 = 0x8CAD;
enum GLenum GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;

// ARB_provoking_vertex
enum GLenum GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
enum GLenum GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
enum GLenum GL_LAST_VERTEX_CONVENTION = 0x8E4E;
enum GLenum GL_PROVOKING_VERTEX = 0x8E4F;

// ARB_texture_multisample
enum GLenum GL_SAMPLE_POSITION = 0x8E50;
enum GLenum GL_SAMPLE_MASK = 0x8E51;
enum GLenum GL_SAMPLE_MASK_VALUE = 0x8E52;
enum GLenum GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
enum GLenum GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
enum GLenum GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
enum GLenum GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
enum GLenum GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
enum GLenum GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
enum GLenum GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
enum GLenum GL_TEXTURE_SAMPLES = 0x9106;
enum GLenum GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
enum GLenum GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
enum GLenum GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
enum GLenum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
enum GLenum GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
enum GLenum GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
enum GLenum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
enum GLenum GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
enum GLenum GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
enum GLenum GL_MAX_INTEGER_SAMPLES = 0x9110;

// ARB_texture_cube_map_array
enum GLenum GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
enum GLenum GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
enum GLenum GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
enum GLenum GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
enum GLenum GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
enum GLenum GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
enum GLenum GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;

// ARB_occlusion_query2
enum GLenum GL_ANY_SAMPLES_PASSED = 0x8C2F;

// ARB_seamless_cube_map
enum GLenum GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;

// ARB_vertex_type_2_10_10_10_rev
enum GLenum GL_INT_2_10_10_10_REV = 0x8D9F;

// ARB_map_buffer_alignment
enum GLenum GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;

// ARB_copy_buffer
enum GLenum GL_COPY_READ_BUFFER_BINDING = 0x8F36;
enum GLenum GL_COPY_READ_BUFFER = GL_COPY_READ_BUFFER_BINDING;
enum GLenum GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
enum GLenum GL_COPY_WRITE_BUFFER = GL_COPY_WRITE_BUFFER_BINDING;

// ARB_transform_feedback2
enum GLenum GL_TRANSFORM_FEEDBACK = 0x8E22;
enum GLenum GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
enum GLenum GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = GL_TRANSFORM_FEEDBACK_PAUSED;
enum GLenum GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
enum GLenum GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = GL_TRANSFORM_FEEDBACK_ACTIVE;
enum GLenum GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;

// ARB_framebuffer_no_attachments
enum GLenum GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
enum GLenum GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
enum GLenum GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
enum GLenum GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
enum GLenum GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
enum GLenum GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
enum GLenum GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
enum GLenum GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
enum GLenum GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;

// ARB_transform_feedback3
enum GLenum GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
enum GLenum GL_MAX_VERTEX_STREAMS = 0x8E71;

// ARB_ES3_compatibility
enum GLenum GL_COMPRESSED_RGB8_ETC2 = 0x9274;
enum GLenum GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
enum GLenum GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
enum GLenum GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
enum GLenum GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
enum GLenum GL_COMPRESSED_R11_EAC = 0x9270;
enum GLenum GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
enum GLenum GL_COMPRESSED_RG11_EAC = 0x9272;
enum GLenum GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
enum GLenum GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
enum GLenum GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
enum GLenum GL_MAX_ELEMENT_INDEX = 0x8D6B;

// VERSION_4_0
enum GLenum GL_SAMPLE_SHADING = 0x8C36;
enum GLenum GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
enum GLenum GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
enum GLenum GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
enum GLenum GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
enum GLenum GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
enum GLenum GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
enum GLenum GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
enum GLenum GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
enum GLenum GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
enum GLenum GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;

// ARB_uniform_buffer_object
enum GLenum GL_UNIFORM_BUFFER = 0x8A11;
enum GLenum GL_UNIFORM_BUFFER_BINDING = 0x8A28;
enum GLenum GL_UNIFORM_BUFFER_START = 0x8A29;
enum GLenum GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
enum GLenum GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
enum GLenum GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
enum GLenum GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
enum GLenum GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
enum GLenum GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
enum GLenum GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
enum GLenum GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
enum GLenum GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
enum GLenum GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
enum GLenum GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
enum GLenum GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
enum GLenum GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
enum GLenum GL_UNIFORM_TYPE = 0x8A37;
enum GLenum GL_UNIFORM_SIZE = 0x8A38;
enum GLenum GL_UNIFORM_NAME_LENGTH = 0x8A39;
enum GLenum GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
enum GLenum GL_UNIFORM_OFFSET = 0x8A3B;
enum GLenum GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
enum GLenum GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
enum GLenum GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
enum GLenum GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
enum GLenum GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
enum GLenum GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
enum GLenum GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
enum GLenum GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
enum GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
enum GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
enum GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
enum GLenum GL_INVALID_INDEX = 0xFFFFFFFF;

// ARB_texture_gather
enum GLenum GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
enum GLenum GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;

// ARB_shader_subroutine
enum GLenum GL_ACTIVE_SUBROUTINES = 0x8DE5;
enum GLenum GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
enum GLenum GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
enum GLenum GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
enum GLenum GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
enum GLenum GL_MAX_SUBROUTINES = 0x8DE7;
enum GLenum GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
enum GLenum GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
enum GLenum GL_COMPATIBLE_SUBROUTINES = 0x8E4B;

// ARB_texture_storage
enum GLenum GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;

// ARB_debug_output
enum GLenum GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
enum GLenum GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
enum GLenum GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
enum GLenum GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
enum GLenum GL_DEBUG_SOURCE_API_ARB = 0x8246;
enum GLenum GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
enum GLenum GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
enum GLenum GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
enum GLenum GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
enum GLenum GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
enum GLenum GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
enum GLenum GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
enum GLenum GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
enum GLenum GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
enum GLenum GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
enum GLenum GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
enum GLenum GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
enum GLenum GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
enum GLenum GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
enum GLenum GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
enum GLenum GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
enum GLenum GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;

// ARB_program_interface_query
enum GLenum GL_UNIFORM = 0x92E1;
enum GLenum GL_UNIFORM_BLOCK = 0x92E2;
enum GLenum GL_PROGRAM_INPUT = 0x92E3;
enum GLenum GL_PROGRAM_OUTPUT = 0x92E4;
enum GLenum GL_BUFFER_VARIABLE = 0x92E5;
enum GLenum GL_SHADER_STORAGE_BLOCK = 0x92E6;
enum GLenum GL_VERTEX_SUBROUTINE = 0x92E8;
enum GLenum GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
enum GLenum GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
enum GLenum GL_GEOMETRY_SUBROUTINE = 0x92EB;
enum GLenum GL_FRAGMENT_SUBROUTINE = 0x92EC;
enum GLenum GL_COMPUTE_SUBROUTINE = 0x92ED;
enum GLenum GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
enum GLenum GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
enum GLenum GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
enum GLenum GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
enum GLenum GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
enum GLenum GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
enum GLenum GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
enum GLenum GL_ACTIVE_RESOURCES = 0x92F5;
enum GLenum GL_MAX_NAME_LENGTH = 0x92F6;
enum GLenum GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
enum GLenum GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
enum GLenum GL_NAME_LENGTH = 0x92F9;
enum GLenum GL_TYPE = 0x92FA;
enum GLenum GL_ARRAY_SIZE = 0x92FB;
enum GLenum GL_OFFSET = 0x92FC;
enum GLenum GL_BLOCK_INDEX = 0x92FD;
enum GLenum GL_ARRAY_STRIDE = 0x92FE;
enum GLenum GL_MATRIX_STRIDE = 0x92FF;
enum GLenum GL_IS_ROW_MAJOR = 0x9300;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
enum GLenum GL_BUFFER_BINDING = 0x9302;
enum GLenum GL_BUFFER_DATA_SIZE = 0x9303;
enum GLenum GL_NUM_ACTIVE_VARIABLES = 0x9304;
enum GLenum GL_ACTIVE_VARIABLES = 0x9305;
enum GLenum GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
enum GLenum GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
enum GLenum GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
enum GLenum GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
enum GLenum GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
enum GLenum GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
enum GLenum GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
enum GLenum GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
enum GLenum GL_LOCATION = 0x930E;
enum GLenum GL_LOCATION_INDEX = 0x930F;
enum GLenum GL_IS_PER_PATCH = 0x92E7;

// ARB_stencil_texturing
enum GLenum GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;

// VERSION_4_3
enum GLenum GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;

// VERSION_3_0
enum GLenum GL_COMPARE_REF_TO_TEXTURE = 0x884E;
enum GLenum GL_CLIP_DISTANCE0 = 0x3000;
enum GLenum GL_CLIP_DISTANCE1 = 0x3001;
enum GLenum GL_CLIP_DISTANCE2 = 0x3002;
enum GLenum GL_CLIP_DISTANCE3 = 0x3003;
enum GLenum GL_CLIP_DISTANCE4 = 0x3004;
enum GLenum GL_CLIP_DISTANCE5 = 0x3005;
enum GLenum GL_CLIP_DISTANCE6 = 0x3006;
enum GLenum GL_CLIP_DISTANCE7 = 0x3007;
enum GLenum GL_MAX_CLIP_DISTANCES = 0x0D32;
enum GLenum GL_MAJOR_VERSION = 0x821B;
enum GLenum GL_MINOR_VERSION = 0x821C;
enum GLenum GL_NUM_EXTENSIONS = 0x821D;
enum GLenum GL_CONTEXT_FLAGS = 0x821E;
enum GLenum GL_COMPRESSED_RED = 0x8225;
enum GLenum GL_COMPRESSED_RG = 0x8226;
enum GLenum GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x0001;
enum GLenum GL_RGBA32F = 0x8814;
enum GLenum GL_RGB32F = 0x8815;
enum GLenum GL_RGBA16F = 0x881A;
enum GLenum GL_RGB16F = 0x881B;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
enum GLenum GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
enum GLenum GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
enum GLenum GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
enum GLenum GL_CLAMP_READ_COLOR = 0x891C;
enum GLenum GL_FIXED_ONLY = 0x891D;
enum GLenum GL_MAX_VARYING_COMPONENTS = 0x8B4B;
enum GLenum GL_TEXTURE_1D_ARRAY = 0x8C18;
enum GLenum GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
enum GLenum GL_TEXTURE_2D_ARRAY = 0x8C1A;
enum GLenum GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
enum GLenum GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
enum GLenum GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
enum GLenum GL_R11F_G11F_B10F = 0x8C3A;
enum GLenum GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
enum GLenum GL_RGB9_E5 = 0x8C3D;
enum GLenum GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
enum GLenum GL_TEXTURE_SHARED_SIZE = 0x8C3F;
enum GLenum GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
enum GLenum GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
enum GLenum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
enum GLenum GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
enum GLenum GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
enum GLenum GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
enum GLenum GL_PRIMITIVES_GENERATED = 0x8C87;
enum GLenum GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
enum GLenum GL_RASTERIZER_DISCARD = 0x8C89;
enum GLenum GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum GLenum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
enum GLenum GL_INTERLEAVED_ATTRIBS = 0x8C8C;
enum GLenum GL_SEPARATE_ATTRIBS = 0x8C8D;
enum GLenum GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
enum GLenum GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
enum GLenum GL_RGBA32UI = 0x8D70;
enum GLenum GL_RGB32UI = 0x8D71;
enum GLenum GL_RGBA16UI = 0x8D76;
enum GLenum GL_RGB16UI = 0x8D77;
enum GLenum GL_RGBA8UI = 0x8D7C;
enum GLenum GL_RGB8UI = 0x8D7D;
enum GLenum GL_RGBA32I = 0x8D82;
enum GLenum GL_RGB32I = 0x8D83;
enum GLenum GL_RGBA16I = 0x8D88;
enum GLenum GL_RGB16I = 0x8D89;
enum GLenum GL_RGBA8I = 0x8D8E;
enum GLenum GL_RGB8I = 0x8D8F;
enum GLenum GL_RED_INTEGER = 0x8D94;
enum GLenum GL_GREEN_INTEGER = 0x8D95;
enum GLenum GL_BLUE_INTEGER = 0x8D96;
enum GLenum GL_RGB_INTEGER = 0x8D98;
enum GLenum GL_RGBA_INTEGER = 0x8D99;
enum GLenum GL_BGR_INTEGER = 0x8D9A;
enum GLenum GL_BGRA_INTEGER = 0x8D9B;
enum GLenum GL_SAMPLER_1D_ARRAY = 0x8DC0;
enum GLenum GL_SAMPLER_2D_ARRAY = 0x8DC1;
enum GLenum GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
enum GLenum GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
enum GLenum GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
enum GLenum GL_UNSIGNED_INT_VEC2 = 0x8DC6;
enum GLenum GL_UNSIGNED_INT_VEC3 = 0x8DC7;
enum GLenum GL_UNSIGNED_INT_VEC4 = 0x8DC8;
enum GLenum GL_INT_SAMPLER_1D = 0x8DC9;
enum GLenum GL_INT_SAMPLER_2D = 0x8DCA;
enum GLenum GL_INT_SAMPLER_3D = 0x8DCB;
enum GLenum GL_INT_SAMPLER_CUBE = 0x8DCC;
enum GLenum GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
enum GLenum GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
enum GLenum GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
enum GLenum GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
enum GLenum GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
enum GLenum GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
enum GLenum GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
enum GLenum GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
enum GLenum GL_QUERY_WAIT = 0x8E13;
enum GLenum GL_QUERY_NO_WAIT = 0x8E14;
enum GLenum GL_QUERY_BY_REGION_WAIT = 0x8E15;
enum GLenum GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
enum GLenum GL_BUFFER_ACCESS_FLAGS = 0x911F;
enum GLenum GL_BUFFER_MAP_LENGTH = 0x9120;
enum GLenum GL_BUFFER_MAP_OFFSET = 0x9121;

// ARB_vertex_array_object
enum GLenum GL_VERTEX_ARRAY_BINDING = 0x85B5;

// ARB_texture_rgb10_a2ui
enum GLenum GL_RGB10_A2UI = 0x906F;

// VERSION_3_1
enum GLenum GL_SAMPLER_2D_RECT = 0x8B63;
enum GLenum GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
enum GLenum GL_SAMPLER_BUFFER = 0x8DC2;
enum GLenum GL_INT_SAMPLER_2D_RECT = 0x8DCD;
enum GLenum GL_INT_SAMPLER_BUFFER = 0x8DD0;
enum GLenum GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
enum GLenum GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
enum GLenum GL_TEXTURE_BUFFER = 0x8C2A;
enum GLenum GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
enum GLenum GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
enum GLenum GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
enum GLenum GL_TEXTURE_BUFFER_FORMAT = 0x8C2E;
enum GLenum GL_TEXTURE_RECTANGLE = 0x84F5;
enum GLenum GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
enum GLenum GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
enum GLenum GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
enum GLenum GL_RED_SNORM = 0x8F90;
enum GLenum GL_RG_SNORM = 0x8F91;
enum GLenum GL_RGB_SNORM = 0x8F92;
enum GLenum GL_RGBA_SNORM = 0x8F93;
enum GLenum GL_R8_SNORM = 0x8F94;
enum GLenum GL_RG8_SNORM = 0x8F95;
enum GLenum GL_RGB8_SNORM = 0x8F96;
enum GLenum GL_RGBA8_SNORM = 0x8F97;
enum GLenum GL_R16_SNORM = 0x8F98;
enum GLenum GL_RG16_SNORM = 0x8F99;
enum GLenum GL_RGB16_SNORM = 0x8F9A;
enum GLenum GL_RGBA16_SNORM = 0x8F9B;
enum GLenum GL_SIGNED_NORMALIZED = 0x8F9C;
enum GLenum GL_PRIMITIVE_RESTART = 0x8F9D;
enum GLenum GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;

// ARB_texture_view
enum GLenum GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
enum GLenum GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
enum GLenum GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
enum GLenum GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
enum GLenum GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;

// VERSION_3_2
enum GLenum GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
enum GLenum GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
enum GLenum GL_LINES_ADJACENCY = 0x000A;
enum GLenum GL_LINE_STRIP_ADJACENCY = 0x000B;
enum GLenum GL_TRIANGLES_ADJACENCY = 0x000C;
enum GLenum GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
enum GLenum GL_PROGRAM_POINT_SIZE = 0x8642;
enum GLenum GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
enum GLenum GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
enum GLenum GL_GEOMETRY_SHADER = 0x8DD9;
enum GLenum GL_GEOMETRY_VERTICES_OUT = 0x8916;
enum GLenum GL_GEOMETRY_INPUT_TYPE = 0x8917;
enum GLenum GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
enum GLenum GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
enum GLenum GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
enum GLenum GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
enum GLenum GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
enum GLenum GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
enum GLenum GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
enum GLenum GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
enum GLenum GL_CONTEXT_PROFILE_MASK = 0x9126;

// ARB_framebuffer_object
enum GLenum GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
enum GLenum GL_FRAMEBUFFER_DEFAULT = 0x8218;
enum GLenum GL_FRAMEBUFFER_UNDEFINED = 0x8219;
enum GLenum GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
enum GLenum GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
enum GLenum GL_DEPTH_STENCIL = 0x84F9;
enum GLenum GL_UNSIGNED_INT_24_8 = 0x84FA;
enum GLenum GL_DEPTH24_STENCIL8 = 0x88F0;
enum GLenum GL_TEXTURE_STENCIL_SIZE = 0x88F1;
enum GLenum GL_TEXTURE_RED_TYPE = 0x8C10;
enum GLenum GL_TEXTURE_GREEN_TYPE = 0x8C11;
enum GLenum GL_TEXTURE_BLUE_TYPE = 0x8C12;
enum GLenum GL_TEXTURE_ALPHA_TYPE = 0x8C13;
enum GLenum GL_TEXTURE_DEPTH_TYPE = 0x8C16;
enum GLenum GL_UNSIGNED_NORMALIZED = 0x8C17;
enum GLenum GL_FRAMEBUFFER_BINDING = 0x8CA6;
enum GLenum GL_DRAW_FRAMEBUFFER_BINDING = GL_FRAMEBUFFER_BINDING;
enum GLenum GL_RENDERBUFFER_BINDING = 0x8CA7;
enum GLenum GL_READ_FRAMEBUFFER = 0x8CA8;
enum GLenum GL_DRAW_FRAMEBUFFER = 0x8CA9;
enum GLenum GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
enum GLenum GL_RENDERBUFFER_SAMPLES = 0x8CAB;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
enum GLenum GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
enum GLenum GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
enum GLenum GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum GLenum GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
enum GLenum GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
enum GLenum GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
enum GLenum GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
enum GLenum GL_COLOR_ATTACHMENT0 = 0x8CE0;
enum GLenum GL_COLOR_ATTACHMENT1 = 0x8CE1;
enum GLenum GL_COLOR_ATTACHMENT2 = 0x8CE2;
enum GLenum GL_COLOR_ATTACHMENT3 = 0x8CE3;
enum GLenum GL_COLOR_ATTACHMENT4 = 0x8CE4;
enum GLenum GL_COLOR_ATTACHMENT5 = 0x8CE5;
enum GLenum GL_COLOR_ATTACHMENT6 = 0x8CE6;
enum GLenum GL_COLOR_ATTACHMENT7 = 0x8CE7;
enum GLenum GL_COLOR_ATTACHMENT8 = 0x8CE8;
enum GLenum GL_COLOR_ATTACHMENT9 = 0x8CE9;
enum GLenum GL_COLOR_ATTACHMENT10 = 0x8CEA;
enum GLenum GL_COLOR_ATTACHMENT11 = 0x8CEB;
enum GLenum GL_COLOR_ATTACHMENT12 = 0x8CEC;
enum GLenum GL_COLOR_ATTACHMENT13 = 0x8CED;
enum GLenum GL_COLOR_ATTACHMENT14 = 0x8CEE;
enum GLenum GL_COLOR_ATTACHMENT15 = 0x8CEF;
enum GLenum GL_DEPTH_ATTACHMENT = 0x8D00;
enum GLenum GL_STENCIL_ATTACHMENT = 0x8D20;
enum GLenum GL_FRAMEBUFFER = 0x8D40;
enum GLenum GL_RENDERBUFFER = 0x8D41;
enum GLenum GL_RENDERBUFFER_WIDTH = 0x8D42;
enum GLenum GL_RENDERBUFFER_HEIGHT = 0x8D43;
enum GLenum GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
enum GLenum GL_STENCIL_INDEX1 = 0x8D46;
enum GLenum GL_STENCIL_INDEX4 = 0x8D47;
enum GLenum GL_STENCIL_INDEX8 = 0x8D48;
enum GLenum GL_STENCIL_INDEX16 = 0x8D49;
enum GLenum GL_RENDERBUFFER_RED_SIZE = 0x8D50;
enum GLenum GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
enum GLenum GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
enum GLenum GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
enum GLenum GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
enum GLenum GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
enum GLenum GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
enum GLenum GL_MAX_SAMPLES = 0x8D57;

// VERSION_3_3
enum GLenum GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;

// VERSION_2_0
enum GLenum GL_BLEND_EQUATION_RGB = 0x8009;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
enum GLenum GL_CURRENT_VERTEX_ATTRIB = 0x8626;
enum GLenum GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
enum GLenum GL_STENCIL_BACK_FUNC = 0x8800;
enum GLenum GL_STENCIL_BACK_FAIL = 0x8801;
enum GLenum GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
enum GLenum GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
enum GLenum GL_MAX_DRAW_BUFFERS = 0x8824;
enum GLenum GL_DRAW_BUFFER0 = 0x8825;
enum GLenum GL_DRAW_BUFFER1 = 0x8826;
enum GLenum GL_DRAW_BUFFER2 = 0x8827;
enum GLenum GL_DRAW_BUFFER3 = 0x8828;
enum GLenum GL_DRAW_BUFFER4 = 0x8829;
enum GLenum GL_DRAW_BUFFER5 = 0x882A;
enum GLenum GL_DRAW_BUFFER6 = 0x882B;
enum GLenum GL_DRAW_BUFFER7 = 0x882C;
enum GLenum GL_DRAW_BUFFER8 = 0x882D;
enum GLenum GL_DRAW_BUFFER9 = 0x882E;
enum GLenum GL_DRAW_BUFFER10 = 0x882F;
enum GLenum GL_DRAW_BUFFER11 = 0x8830;
enum GLenum GL_DRAW_BUFFER12 = 0x8831;
enum GLenum GL_DRAW_BUFFER13 = 0x8832;
enum GLenum GL_DRAW_BUFFER14 = 0x8833;
enum GLenum GL_DRAW_BUFFER15 = 0x8834;
enum GLenum GL_BLEND_EQUATION_ALPHA = 0x883D;
enum GLenum GL_MAX_VERTEX_ATTRIBS = 0x8869;
enum GLenum GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
enum GLenum GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
enum GLenum GL_FRAGMENT_SHADER = 0x8B30;
enum GLenum GL_VERTEX_SHADER = 0x8B31;
enum GLenum GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
enum GLenum GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
enum GLenum GL_MAX_VARYING_FLOATS = 0x8B4B;
enum GLenum GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
enum GLenum GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum GLenum GL_SHADER_TYPE = 0x8B4F;
enum GLenum GL_FLOAT_VEC2 = 0x8B50;
enum GLenum GL_FLOAT_VEC3 = 0x8B51;
enum GLenum GL_FLOAT_VEC4 = 0x8B52;
enum GLenum GL_INT_VEC2 = 0x8B53;
enum GLenum GL_INT_VEC3 = 0x8B54;
enum GLenum GL_INT_VEC4 = 0x8B55;
enum GLenum GL_BOOL = 0x8B56;
enum GLenum GL_BOOL_VEC2 = 0x8B57;
enum GLenum GL_BOOL_VEC3 = 0x8B58;
enum GLenum GL_BOOL_VEC4 = 0x8B59;
enum GLenum GL_FLOAT_MAT2 = 0x8B5A;
enum GLenum GL_FLOAT_MAT3 = 0x8B5B;
enum GLenum GL_FLOAT_MAT4 = 0x8B5C;
enum GLenum GL_SAMPLER_1D = 0x8B5D;
enum GLenum GL_SAMPLER_2D = 0x8B5E;
enum GLenum GL_SAMPLER_3D = 0x8B5F;
enum GLenum GL_SAMPLER_CUBE = 0x8B60;
enum GLenum GL_SAMPLER_1D_SHADOW = 0x8B61;
enum GLenum GL_SAMPLER_2D_SHADOW = 0x8B62;
enum GLenum GL_DELETE_STATUS = 0x8B80;
enum GLenum GL_COMPILE_STATUS = 0x8B81;
enum GLenum GL_LINK_STATUS = 0x8B82;
enum GLenum GL_VALIDATE_STATUS = 0x8B83;
enum GLenum GL_INFO_LOG_LENGTH = 0x8B84;
enum GLenum GL_ATTACHED_SHADERS = 0x8B85;
enum GLenum GL_ACTIVE_UNIFORMS = 0x8B86;
enum GLenum GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
enum GLenum GL_SHADER_SOURCE_LENGTH = 0x8B88;
enum GLenum GL_ACTIVE_ATTRIBUTES = 0x8B89;
enum GLenum GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
enum GLenum GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
enum GLenum GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
enum GLenum GL_CURRENT_PROGRAM = 0x8B8D;
enum GLenum GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
enum GLenum GL_LOWER_LEFT = 0x8CA1;
enum GLenum GL_UPPER_LEFT = 0x8CA2;
enum GLenum GL_STENCIL_BACK_REF = 0x8CA3;
enum GLenum GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
enum GLenum GL_STENCIL_BACK_WRITEMASK = 0x8CA5;

// ARB_map_buffer_range
enum GLenum GL_MAP_READ_BIT = 0x0001;
enum GLenum GL_MAP_WRITE_BIT = 0x0002;
enum GLenum GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
enum GLenum GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
enum GLenum GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
enum GLenum GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;

// ARB_vertex_attrib_binding
enum GLenum GL_VERTEX_ATTRIB_BINDING = 0x82D4;
enum GLenum GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
enum GLenum GL_VERTEX_BINDING_DIVISOR = 0x82D6;
enum GLenum GL_VERTEX_BINDING_OFFSET = 0x82D7;
enum GLenum GL_VERTEX_BINDING_STRIDE = 0x82D8;
enum GLenum GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
enum GLenum GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;

// VERSION_2_1
enum GLenum GL_PIXEL_PACK_BUFFER = 0x88EB;
enum GLenum GL_PIXEL_UNPACK_BUFFER = 0x88EC;
enum GLenum GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
enum GLenum GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
enum GLenum GL_FLOAT_MAT2x3 = 0x8B65;
enum GLenum GL_FLOAT_MAT2x4 = 0x8B66;
enum GLenum GL_FLOAT_MAT3x2 = 0x8B67;
enum GLenum GL_FLOAT_MAT3x4 = 0x8B68;
enum GLenum GL_FLOAT_MAT4x2 = 0x8B69;
enum GLenum GL_FLOAT_MAT4x3 = 0x8B6A;
enum GLenum GL_SRGB = 0x8C40;
enum GLenum GL_SRGB8 = 0x8C41;
enum GLenum GL_SRGB_ALPHA = 0x8C42;
enum GLenum GL_SRGB8_ALPHA8 = 0x8C43;
enum GLenum GL_COMPRESSED_SRGB = 0x8C48;
enum GLenum GL_COMPRESSED_SRGB_ALPHA = 0x8C49;

// ARB_texture_compression_rgtc
enum GLenum GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
enum GLenum GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
enum GLenum GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
enum GLenum GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;

// ARB_sampler_objects
enum GLenum GL_SAMPLER_BINDING = 0x8919;

// ARB_gpu_shader_fp64
enum GLenum GL_DOUBLE_VEC2 = 0x8FFC;
enum GLenum GL_DOUBLE_VEC3 = 0x8FFD;
enum GLenum GL_DOUBLE_VEC4 = 0x8FFE;
enum GLenum GL_DOUBLE_MAT2 = 0x8F46;
enum GLenum GL_DOUBLE_MAT3 = 0x8F47;
enum GLenum GL_DOUBLE_MAT4 = 0x8F48;
enum GLenum GL_DOUBLE_MAT2x3 = 0x8F49;
enum GLenum GL_DOUBLE_MAT2x4 = 0x8F4A;
enum GLenum GL_DOUBLE_MAT3x2 = 0x8F4B;
enum GLenum GL_DOUBLE_MAT3x4 = 0x8F4C;
enum GLenum GL_DOUBLE_MAT4x2 = 0x8F4D;
enum GLenum GL_DOUBLE_MAT4x3 = 0x8F4E;

// ARB_half_float_vertex
enum GLenum GL_HALF_FLOAT = 0x140B;

// ARB_texture_rg
enum GLenum GL_RG = 0x8227;
enum GLenum GL_RG_INTEGER = 0x8228;
enum GLenum GL_R8 = 0x8229;
enum GLenum GL_R16 = 0x822A;
enum GLenum GL_RG8 = 0x822B;
enum GLenum GL_RG16 = 0x822C;
enum GLenum GL_R16F = 0x822D;
enum GLenum GL_R32F = 0x822E;
enum GLenum GL_RG16F = 0x822F;
enum GLenum GL_RG32F = 0x8230;
enum GLenum GL_R8I = 0x8231;
enum GLenum GL_R8UI = 0x8232;
enum GLenum GL_R16I = 0x8233;
enum GLenum GL_R16UI = 0x8234;
enum GLenum GL_R32I = 0x8235;
enum GLenum GL_R32UI = 0x8236;
enum GLenum GL_RG8I = 0x8237;
enum GLenum GL_RG8UI = 0x8238;
enum GLenum GL_RG16I = 0x8239;
enum GLenum GL_RG16UI = 0x823A;
enum GLenum GL_RG32I = 0x823B;
enum GLenum GL_RG32UI = 0x823C;

// ARB_gpu_shader5
enum GLenum GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
enum GLenum GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
enum GLenum GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
enum GLenum GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
enum GLenum GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;

// ARB_viewport_array
enum GLenum GL_MAX_VIEWPORTS = 0x825B;
enum GLenum GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
enum GLenum GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
enum GLenum GL_LAYER_PROVOKING_VERTEX = 0x825E;
enum GLenum GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
enum GLenum GL_UNDEFINED_VERTEX = 0x8260;

// ARB_shader_atomic_counters
enum GLenum GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
enum GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
enum GLenum GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
enum GLenum GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
enum GLenum GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
enum GLenum GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
enum GLenum GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
enum GLenum GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
enum GLenum GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
enum GLenum GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
enum GLenum GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
enum GLenum GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
enum GLenum GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
enum GLenum GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
enum GLenum GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
enum GLenum GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
enum GLenum GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
enum GLenum GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
enum GLenum GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;

// VERSION_1_1
enum GLenum GL_DEPTH_BUFFER_BIT = 0x00000100;
enum GLenum GL_STENCIL_BUFFER_BIT = 0x00000400;
enum GLenum GL_COLOR_BUFFER_BIT = 0x00004000;
enum GLboolean GL_FALSE = 0;
enum GLboolean GL_TRUE = 1;
enum GLenum GL_POINTS = 0x0000;
enum GLenum GL_LINES = 0x0001;
enum GLenum GL_LINE_LOOP = 0x0002;
enum GLenum GL_LINE_STRIP = 0x0003;
enum GLenum GL_TRIANGLES = 0x0004;
enum GLenum GL_TRIANGLE_STRIP = 0x0005;
enum GLenum GL_TRIANGLE_FAN = 0x0006;
enum GLenum GL_NEVER = 0x0200;
enum GLenum GL_LESS = 0x0201;
enum GLenum GL_EQUAL = 0x0202;
enum GLenum GL_LEQUAL = 0x0203;
enum GLenum GL_GREATER = 0x0204;
enum GLenum GL_NOTEQUAL = 0x0205;
enum GLenum GL_GEQUAL = 0x0206;
enum GLenum GL_ALWAYS = 0x0207;
enum GLboolean GL_ZERO = 0;
enum GLboolean GL_ONE = 1;
enum GLenum GL_SRC_COLOR = 0x0300;
enum GLenum GL_ONE_MINUS_SRC_COLOR = 0x0301;
enum GLenum GL_SRC_ALPHA = 0x0302;
enum GLenum GL_ONE_MINUS_SRC_ALPHA = 0x0303;
enum GLenum GL_DST_ALPHA = 0x0304;
enum GLenum GL_ONE_MINUS_DST_ALPHA = 0x0305;
enum GLenum GL_DST_COLOR = 0x0306;
enum GLenum GL_ONE_MINUS_DST_COLOR = 0x0307;
enum GLenum GL_SRC_ALPHA_SATURATE = 0x0308;
enum GLboolean GL_NONE = 0;
enum GLenum GL_FRONT_LEFT = 0x0400;
enum GLenum GL_FRONT_RIGHT = 0x0401;
enum GLenum GL_BACK_LEFT = 0x0402;
enum GLenum GL_BACK_RIGHT = 0x0403;
enum GLenum GL_FRONT = 0x0404;
enum GLenum GL_BACK = 0x0405;
enum GLenum GL_LEFT = 0x0406;
enum GLenum GL_RIGHT = 0x0407;
enum GLenum GL_FRONT_AND_BACK = 0x0408;
enum GLboolean GL_NO_ERROR = 0;
enum GLenum GL_INVALID_ENUM = 0x0500;
enum GLenum GL_INVALID_VALUE = 0x0501;
enum GLenum GL_INVALID_OPERATION = 0x0502;
enum GLenum GL_OUT_OF_MEMORY = 0x0505;
enum GLenum GL_CW = 0x0900;
enum GLenum GL_CCW = 0x0901;
enum GLenum GL_POINT_SIZE = 0x0B11;
enum GLenum GL_POINT_SIZE_RANGE = 0x0B12;
enum GLenum GL_POINT_SIZE_GRANULARITY = 0x0B13;
enum GLenum GL_LINE_SMOOTH = 0x0B20;
enum GLenum GL_LINE_WIDTH = 0x0B21;
enum GLenum GL_LINE_WIDTH_RANGE = 0x0B22;
enum GLenum GL_LINE_WIDTH_GRANULARITY = 0x0B23;
enum GLenum GL_POLYGON_SMOOTH = 0x0B41;
enum GLenum GL_CULL_FACE = 0x0B44;
enum GLenum GL_CULL_FACE_MODE = 0x0B45;
enum GLenum GL_FRONT_FACE = 0x0B46;
enum GLenum GL_DEPTH_RANGE = 0x0B70;
enum GLenum GL_DEPTH_TEST = 0x0B71;
enum GLenum GL_DEPTH_WRITEMASK = 0x0B72;
enum GLenum GL_DEPTH_CLEAR_VALUE = 0x0B73;
enum GLenum GL_DEPTH_FUNC = 0x0B74;
enum GLenum GL_STENCIL_TEST = 0x0B90;
enum GLenum GL_STENCIL_CLEAR_VALUE = 0x0B91;
enum GLenum GL_STENCIL_FUNC = 0x0B92;
enum GLenum GL_STENCIL_VALUE_MASK = 0x0B93;
enum GLenum GL_STENCIL_FAIL = 0x0B94;
enum GLenum GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
enum GLenum GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
enum GLenum GL_STENCIL_REF = 0x0B97;
enum GLenum GL_STENCIL_WRITEMASK = 0x0B98;
enum GLenum GL_VIEWPORT = 0x0BA2;
enum GLenum GL_DITHER = 0x0BD0;
enum GLenum GL_BLEND_DST = 0x0BE0;
enum GLenum GL_BLEND_SRC = 0x0BE1;
enum GLenum GL_BLEND = 0x0BE2;
enum GLenum GL_LOGIC_OP_MODE = 0x0BF0;
enum GLenum GL_COLOR_LOGIC_OP = 0x0BF2;
enum GLenum GL_DRAW_BUFFER = 0x0C01;
enum GLenum GL_READ_BUFFER = 0x0C02;
enum GLenum GL_SCISSOR_BOX = 0x0C10;
enum GLenum GL_SCISSOR_TEST = 0x0C11;
enum GLenum GL_COLOR_CLEAR_VALUE = 0x0C22;
enum GLenum GL_COLOR_WRITEMASK = 0x0C23;
enum GLenum GL_DOUBLEBUFFER = 0x0C32;
enum GLenum GL_STEREO = 0x0C33;
enum GLenum GL_LINE_SMOOTH_HINT = 0x0C52;
enum GLenum GL_POLYGON_SMOOTH_HINT = 0x0C53;
enum GLenum GL_UNPACK_SWAP_BYTES = 0x0CF0;
enum GLenum GL_UNPACK_LSB_FIRST = 0x0CF1;
enum GLenum GL_UNPACK_ROW_LENGTH = 0x0CF2;
enum GLenum GL_UNPACK_SKIP_ROWS = 0x0CF3;
enum GLenum GL_UNPACK_SKIP_PIXELS = 0x0CF4;
enum GLenum GL_UNPACK_ALIGNMENT = 0x0CF5;
enum GLenum GL_PACK_SWAP_BYTES = 0x0D00;
enum GLenum GL_PACK_LSB_FIRST = 0x0D01;
enum GLenum GL_PACK_ROW_LENGTH = 0x0D02;
enum GLenum GL_PACK_SKIP_ROWS = 0x0D03;
enum GLenum GL_PACK_SKIP_PIXELS = 0x0D04;
enum GLenum GL_PACK_ALIGNMENT = 0x0D05;
enum GLenum GL_MAX_TEXTURE_SIZE = 0x0D33;
enum GLenum GL_MAX_VIEWPORT_DIMS = 0x0D3A;
enum GLenum GL_SUBPIXEL_BITS = 0x0D50;
enum GLenum GL_TEXTURE_1D = 0x0DE0;
enum GLenum GL_TEXTURE_2D = 0x0DE1;
enum GLenum GL_POLYGON_OFFSET_UNITS = 0x2A00;
enum GLenum GL_POLYGON_OFFSET_POINT = 0x2A01;
enum GLenum GL_POLYGON_OFFSET_LINE = 0x2A02;
enum GLenum GL_POLYGON_OFFSET_FILL = 0x8037;
enum GLenum GL_POLYGON_OFFSET_FACTOR = 0x8038;
enum GLenum GL_TEXTURE_BINDING_1D = 0x8068;
enum GLenum GL_TEXTURE_BINDING_2D = 0x8069;
enum GLenum GL_TEXTURE_WIDTH = 0x1000;
enum GLenum GL_TEXTURE_HEIGHT = 0x1001;
enum GLenum GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
enum GLenum GL_TEXTURE_BORDER_COLOR = 0x1004;
enum GLenum GL_TEXTURE_RED_SIZE = 0x805C;
enum GLenum GL_TEXTURE_GREEN_SIZE = 0x805D;
enum GLenum GL_TEXTURE_BLUE_SIZE = 0x805E;
enum GLenum GL_TEXTURE_ALPHA_SIZE = 0x805F;
enum GLenum GL_DONT_CARE = 0x1100;
enum GLenum GL_FASTEST = 0x1101;
enum GLenum GL_NICEST = 0x1102;
enum GLenum GL_BYTE = 0x1400;
enum GLenum GL_UNSIGNED_BYTE = 0x1401;
enum GLenum GL_SHORT = 0x1402;
enum GLenum GL_UNSIGNED_SHORT = 0x1403;
enum GLenum GL_INT = 0x1404;
enum GLenum GL_UNSIGNED_INT = 0x1405;
enum GLenum GL_FLOAT = 0x1406;
enum GLenum GL_DOUBLE = 0x140A;
enum GLenum GL_STACK_OVERFLOW = 0x0503;
enum GLenum GL_STACK_UNDERFLOW = 0x0504;
enum GLenum GL_CLEAR = 0x1500;
enum GLenum GL_AND = 0x1501;
enum GLenum GL_AND_REVERSE = 0x1502;
enum GLenum GL_COPY = 0x1503;
enum GLenum GL_AND_INVERTED = 0x1504;
enum GLenum GL_NOOP = 0x1505;
enum GLenum GL_XOR = 0x1506;
enum GLenum GL_OR = 0x1507;
enum GLenum GL_NOR = 0x1508;
enum GLenum GL_EQUIV = 0x1509;
enum GLenum GL_INVERT = 0x150A;
enum GLenum GL_OR_REVERSE = 0x150B;
enum GLenum GL_COPY_INVERTED = 0x150C;
enum GLenum GL_OR_INVERTED = 0x150D;
enum GLenum GL_NAND = 0x150E;
enum GLenum GL_SET = 0x150F;
enum GLenum GL_TEXTURE = 0x1702;
enum GLenum GL_COLOR = 0x1800;
enum GLenum GL_DEPTH = 0x1801;
enum GLenum GL_STENCIL = 0x1802;
enum GLenum GL_STENCIL_INDEX = 0x1901;
enum GLenum GL_DEPTH_COMPONENT = 0x1902;
enum GLenum GL_RED = 0x1903;
enum GLenum GL_GREEN = 0x1904;
enum GLenum GL_BLUE = 0x1905;
enum GLenum GL_ALPHA = 0x1906;
enum GLenum GL_RGB = 0x1907;
enum GLenum GL_RGBA = 0x1908;
enum GLenum GL_POINT = 0x1B00;
enum GLenum GL_LINE = 0x1B01;
enum GLenum GL_FILL = 0x1B02;
enum GLenum GL_KEEP = 0x1E00;
enum GLenum GL_REPLACE = 0x1E01;
enum GLenum GL_INCR = 0x1E02;
enum GLenum GL_DECR = 0x1E03;
enum GLenum GL_VENDOR = 0x1F00;
enum GLenum GL_RENDERER = 0x1F01;
enum GLenum GL_VERSION = 0x1F02;
enum GLenum GL_EXTENSIONS = 0x1F03;
enum GLenum GL_NEAREST = 0x2600;
enum GLenum GL_LINEAR = 0x2601;
enum GLenum GL_NEAREST_MIPMAP_NEAREST = 0x2700;
enum GLenum GL_LINEAR_MIPMAP_NEAREST = 0x2701;
enum GLenum GL_NEAREST_MIPMAP_LINEAR = 0x2702;
enum GLenum GL_LINEAR_MIPMAP_LINEAR = 0x2703;
enum GLenum GL_TEXTURE_MAG_FILTER = 0x2800;
enum GLenum GL_TEXTURE_MIN_FILTER = 0x2801;
enum GLenum GL_TEXTURE_WRAP_S = 0x2802;
enum GLenum GL_TEXTURE_WRAP_T = 0x2803;
enum GLenum GL_PROXY_TEXTURE_1D = 0x8063;
enum GLenum GL_PROXY_TEXTURE_2D = 0x8064;
enum GLenum GL_REPEAT = 0x2901;
enum GLenum GL_R3_G3_B2 = 0x2A10;
enum GLenum GL_RGB4 = 0x804F;
enum GLenum GL_RGB5 = 0x8050;
enum GLenum GL_RGB8 = 0x8051;
enum GLenum GL_RGB10 = 0x8052;
enum GLenum GL_RGB12 = 0x8053;
enum GLenum GL_RGB16 = 0x8054;
enum GLenum GL_RGBA2 = 0x8055;
enum GLenum GL_RGBA4 = 0x8056;
enum GLenum GL_RGB5_A1 = 0x8057;
enum GLenum GL_RGBA8 = 0x8058;
enum GLenum GL_RGB10_A2 = 0x8059;
enum GLenum GL_RGBA12 = 0x805A;
enum GLenum GL_RGBA16 = 0x805B;

// ARB_compressed_texture_pixel_storage
enum GLenum GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
enum GLenum GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
enum GLenum GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
enum GLenum GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
enum GLenum GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
enum GLenum GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
enum GLenum GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
enum GLenum GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;

// VERSION_1_2
enum GLenum GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
enum GLenum GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
enum GLenum GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
enum GLenum GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
enum GLenum GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
enum GLenum GL_TEXTURE_BINDING_3D = 0x806A;
enum GLenum GL_PACK_SKIP_IMAGES = 0x806B;
enum GLenum GL_PACK_IMAGE_HEIGHT = 0x806C;
enum GLenum GL_UNPACK_SKIP_IMAGES = 0x806D;
enum GLenum GL_UNPACK_IMAGE_HEIGHT = 0x806E;
enum GLenum GL_TEXTURE_3D = 0x806F;
enum GLenum GL_PROXY_TEXTURE_3D = 0x8070;
enum GLenum GL_TEXTURE_DEPTH = 0x8071;
enum GLenum GL_TEXTURE_WRAP_R = 0x8072;
enum GLenum GL_MAX_3D_TEXTURE_SIZE = 0x8073;
enum GLenum GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
enum GLenum GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
enum GLenum GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
enum GLenum GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
enum GLenum GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
enum GLenum GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
enum GLenum GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
enum GLenum GL_BGR = 0x80E0;
enum GLenum GL_BGRA = 0x80E1;
enum GLenum GL_MAX_ELEMENTS_VERTICES = 0x80E8;
enum GLenum GL_MAX_ELEMENTS_INDICES = 0x80E9;
enum GLenum GL_CLAMP_TO_EDGE = 0x812F;
enum GLenum GL_TEXTURE_MIN_LOD = 0x813A;
enum GLenum GL_TEXTURE_MAX_LOD = 0x813B;
enum GLenum GL_TEXTURE_BASE_LEVEL = 0x813C;
enum GLenum GL_TEXTURE_MAX_LEVEL = 0x813D;
enum GLenum GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
enum GLenum GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
enum GLenum GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
enum GLenum GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
enum GLenum GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;

// ARB_shader_storage_buffer_object
enum GLenum GL_SHADER_STORAGE_BUFFER = 0x90D2;
enum GLenum GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
enum GLenum GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
enum GLenum GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
enum GLenum GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
enum GLenum GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
enum GLenum GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
enum GLenum GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
enum GLenum GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
enum GLenum GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
enum GLenum GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
enum GLenum GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
enum GLenum GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
enum GLenum GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
enum GLenum GL_SHADER_STORAGE_BARRIER_BIT = 0x2000;
enum GLenum GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS;

// VERSION_1_3
enum GLenum GL_TEXTURE0 = 0x84C0;
enum GLenum GL_TEXTURE1 = 0x84C1;
enum GLenum GL_TEXTURE2 = 0x84C2;
enum GLenum GL_TEXTURE3 = 0x84C3;
enum GLenum GL_TEXTURE4 = 0x84C4;
enum GLenum GL_TEXTURE5 = 0x84C5;
enum GLenum GL_TEXTURE6 = 0x84C6;
enum GLenum GL_TEXTURE7 = 0x84C7;
enum GLenum GL_TEXTURE8 = 0x84C8;
enum GLenum GL_TEXTURE9 = 0x84C9;
enum GLenum GL_TEXTURE10 = 0x84CA;
enum GLenum GL_TEXTURE11 = 0x84CB;
enum GLenum GL_TEXTURE12 = 0x84CC;
enum GLenum GL_TEXTURE13 = 0x84CD;
enum GLenum GL_TEXTURE14 = 0x84CE;
enum GLenum GL_TEXTURE15 = 0x84CF;
enum GLenum GL_TEXTURE16 = 0x84D0;
enum GLenum GL_TEXTURE17 = 0x84D1;
enum GLenum GL_TEXTURE18 = 0x84D2;
enum GLenum GL_TEXTURE19 = 0x84D3;
enum GLenum GL_TEXTURE20 = 0x84D4;
enum GLenum GL_TEXTURE21 = 0x84D5;
enum GLenum GL_TEXTURE22 = 0x84D6;
enum GLenum GL_TEXTURE23 = 0x84D7;
enum GLenum GL_TEXTURE24 = 0x84D8;
enum GLenum GL_TEXTURE25 = 0x84D9;
enum GLenum GL_TEXTURE26 = 0x84DA;
enum GLenum GL_TEXTURE27 = 0x84DB;
enum GLenum GL_TEXTURE28 = 0x84DC;
enum GLenum GL_TEXTURE29 = 0x84DD;
enum GLenum GL_TEXTURE30 = 0x84DE;
enum GLenum GL_TEXTURE31 = 0x84DF;
enum GLenum GL_ACTIVE_TEXTURE = 0x84E0;
enum GLenum GL_MULTISAMPLE = 0x809D;
enum GLenum GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
enum GLenum GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
enum GLenum GL_SAMPLE_COVERAGE = 0x80A0;
enum GLenum GL_SAMPLE_BUFFERS = 0x80A8;
enum GLenum GL_SAMPLES = 0x80A9;
enum GLenum GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
enum GLenum GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
enum GLenum GL_TEXTURE_CUBE_MAP = 0x8513;
enum GLenum GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
enum GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum GLenum GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
enum GLenum GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
enum GLenum GL_COMPRESSED_RGB = 0x84ED;
enum GLenum GL_COMPRESSED_RGBA = 0x84EE;
enum GLenum GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
enum GLenum GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
enum GLenum GL_TEXTURE_COMPRESSED = 0x86A1;
enum GLenum GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum GLenum GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
enum GLenum GL_CLAMP_TO_BORDER = 0x812D;

// ARB_imaging
enum GLenum GL_CONSTANT_COLOR = 0x8001;
enum GLenum GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
enum GLenum GL_CONSTANT_ALPHA = 0x8003;
enum GLenum GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
enum GLenum GL_BLEND_COLOR = 0x8005;
enum GLenum GL_FUNC_ADD = 0x8006;
enum GLenum GL_MIN = 0x8007;
enum GLenum GL_MAX = 0x8008;
enum GLenum GL_BLEND_EQUATION = 0x8009;
enum GLenum GL_FUNC_SUBTRACT = 0x800A;
enum GLenum GL_FUNC_REVERSE_SUBTRACT = 0x800B;

// ARB_texture_compression_bptc
enum GLenum GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
enum GLenum GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
enum GLenum GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
enum GLenum GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;

// KHR_texture_compression_astc_ldr
enum GLenum GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
enum GLenum GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
enum GLenum GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
enum GLenum GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
enum GLenum GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
enum GLenum GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
enum GLenum GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
enum GLenum GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
enum GLenum GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
enum GLenum GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
enum GLenum GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
enum GLenum GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
enum GLenum GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
enum GLenum GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
enum GLenum GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
struct Functions {

    // VERSION_1_4
    void function(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) glBlendFuncSeparate;
    void function(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) glMultiDrawArrays;
    void function(GLenum mode, const GLsizei *count, GLenum type, const GLvoid** indices, GLsizei drawcount) glMultiDrawElements;
    void function(GLenum pname, GLfloat param) glPointParameterf;
    void function(GLenum pname, const GLfloat *params) glPointParameterfv;
    void function(GLenum pname, GLint param) glPointParameteri;
    void function(GLenum pname, const GLint *params) glPointParameteriv;

    // KHR_debug
    void function(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) glDebugMessageControl;
    void function(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) glDebugMessageInsert;
    void function(GLDEBUGPROC callback, const void *userParam) glDebugMessageCallback;
    GLuint function(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) glGetDebugMessageLog;
    void function(GLenum source, GLuint id, GLsizei length, const GLchar *message) glPushDebugGroup;
    void function() glPopDebugGroup;
    void function(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) glObjectLabel;
    void function(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) glGetObjectLabel;
    void function(const void *ptr, GLsizei length, const GLchar *label) glObjectPtrLabel;
    void function(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) glGetObjectPtrLabel;

    // VERSION_1_5
    void function(GLsizei n, GLuint *ids) glGenQueries;
    void function(GLsizei n, const GLuint *ids) glDeleteQueries;
    GLboolean function(GLuint id) glIsQuery;
    void function(GLenum target, GLuint id) glBeginQuery;
    void function(GLenum target) glEndQuery;
    void function(GLenum target, GLenum pname, GLint *params) glGetQueryiv;
    void function(GLuint id, GLenum pname, GLint *params) glGetQueryObjectiv;
    void function(GLuint id, GLenum pname, GLuint *params) glGetQueryObjectuiv;
    void function(GLenum target, GLuint buffer) glBindBuffer;
    void function(GLsizei n, const GLuint *buffers) glDeleteBuffers;
    void function(GLsizei n, GLuint *buffers) glGenBuffers;
    GLboolean function(GLuint buffer) glIsBuffer;
    void function(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage) glBufferData;
    void function(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data) glBufferSubData;
    void function(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data) glGetBufferSubData;
    GLvoid* function(GLenum target, GLenum access) glMapBuffer;
    GLboolean function(GLenum target) glUnmapBuffer;
    void function(GLenum target, GLenum pname, GLint *params) glGetBufferParameteriv;
    void function(GLenum target, GLenum pname, GLvoid* *params) glGetBufferPointerv;

    // ARB_texture_buffer_range
    void function(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) glTexBufferRange;
    void function(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) glTextureBufferRangeEXT;

    // ARB_sample_shading
    void function(GLfloat value) glMinSampleShadingARB;

    // ARB_ES2_compatibility
    void function() glReleaseShaderCompiler;
    void function(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length) glShaderBinary;
    void function(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) glGetShaderPrecisionFormat;
    void function(GLfloat n, GLfloat f) glDepthRangef;
    void function(GLfloat d) glClearDepthf;

    // ARB_copy_image
    void function(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) glCopyImageSubData;

    // ARB_internalformat_query2
    void function(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) glGetInternalformati64v;

    // ARB_invalidate_subdata
    void function(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) glInvalidateTexSubImage;
    void function(GLuint texture, GLint level) glInvalidateTexImage;
    void function(GLuint buffer, GLintptr offset, GLsizeiptr length) glInvalidateBufferSubData;
    void function(GLuint buffer) glInvalidateBufferData;
    void function(GLenum target, GLsizei numAttachments, const GLenum *attachments) glInvalidateFramebuffer;
    void function(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) glInvalidateSubFramebuffer;

    // ARB_shading_language_include
    void function(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) glNamedStringARB;
    void function(GLint namelen, const GLchar *name) glDeleteNamedStringARB;
    void function(GLuint shader, GLsizei count, const GLchar* *path, const GLint *length) glCompileShaderIncludeARB;
    GLboolean function(GLint namelen, const GLchar *name) glIsNamedStringARB;
    void function(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) glGetNamedStringARB;
    void function(GLint namelen, const GLchar *name, GLenum pname, GLint *params) glGetNamedStringivARB;

    // ARB_separate_shader_objects
    void function(GLuint pipeline, GLbitfield stages, GLuint program) glUseProgramStages;
    void function(GLuint pipeline, GLuint program) glActiveShaderProgram;
    GLuint function(GLenum type, GLsizei count, const GLchar** strings) glCreateShaderProgramv;
    void function(GLuint pipeline) glBindProgramPipeline;
    void function(GLsizei n, const GLuint *pipelines) glDeleteProgramPipelines;
    void function(GLsizei n, GLuint *pipelines) glGenProgramPipelines;
    GLboolean function(GLuint pipeline) glIsProgramPipeline;
    void function(GLuint pipeline, GLenum pname, GLint *params) glGetProgramPipelineiv;
    void function(GLuint program, GLint location, GLint v0) glProgramUniform1i;
    void function(GLuint program, GLint location, GLsizei count, const GLint *value) glProgramUniform1iv;
    void function(GLuint program, GLint location, GLfloat v0) glProgramUniform1f;
    void function(GLuint program, GLint location, GLsizei count, const GLfloat *value) glProgramUniform1fv;
    void function(GLuint program, GLint location, GLdouble v0) glProgramUniform1d;
    void function(GLuint program, GLint location, GLsizei count, const GLdouble *value) glProgramUniform1dv;
    void function(GLuint program, GLint location, GLuint v0) glProgramUniform1ui;
    void function(GLuint program, GLint location, GLsizei count, const GLuint *value) glProgramUniform1uiv;
    void function(GLuint program, GLint location, GLint v0, GLint v1) glProgramUniform2i;
    void function(GLuint program, GLint location, GLsizei count, const GLint *value) glProgramUniform2iv;
    void function(GLuint program, GLint location, GLfloat v0, GLfloat v1) glProgramUniform2f;
    void function(GLuint program, GLint location, GLsizei count, const GLfloat *value) glProgramUniform2fv;
    void function(GLuint program, GLint location, GLdouble v0, GLdouble v1) glProgramUniform2d;
    void function(GLuint program, GLint location, GLsizei count, const GLdouble *value) glProgramUniform2dv;
    void function(GLuint program, GLint location, GLuint v0, GLuint v1) glProgramUniform2ui;
    void function(GLuint program, GLint location, GLsizei count, const GLuint *value) glProgramUniform2uiv;
    void function(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) glProgramUniform3i;
    void function(GLuint program, GLint location, GLsizei count, const GLint *value) glProgramUniform3iv;
    void function(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) glProgramUniform3f;
    void function(GLuint program, GLint location, GLsizei count, const GLfloat *value) glProgramUniform3fv;
    void function(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) glProgramUniform3d;
    void function(GLuint program, GLint location, GLsizei count, const GLdouble *value) glProgramUniform3dv;
    void function(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) glProgramUniform3ui;
    void function(GLuint program, GLint location, GLsizei count, const GLuint *value) glProgramUniform3uiv;
    void function(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) glProgramUniform4i;
    void function(GLuint program, GLint location, GLsizei count, const GLint *value) glProgramUniform4iv;
    void function(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) glProgramUniform4f;
    void function(GLuint program, GLint location, GLsizei count, const GLfloat *value) glProgramUniform4fv;
    void function(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) glProgramUniform4d;
    void function(GLuint program, GLint location, GLsizei count, const GLdouble *value) glProgramUniform4dv;
    void function(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) glProgramUniform4ui;
    void function(GLuint program, GLint location, GLsizei count, const GLuint *value) glProgramUniform4uiv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix2fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix3fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix4fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix2dv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix3dv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix4dv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix2x3fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix3x2fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix2x4fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix4x2fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix3x4fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glProgramUniformMatrix4x3fv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix2x3dv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix3x2dv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix2x4dv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix4x2dv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix3x4dv;
    void function(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glProgramUniformMatrix4x3dv;
    void function(GLuint pipeline) glValidateProgramPipeline;
    void function(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) glGetProgramPipelineInfoLog;

    // ARB_robustness
    GLenum function() glGetGraphicsResetStatusARB;
    void function(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) glGetnMapdvARB;
    void function(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) glGetnMapfvARB;
    void function(GLenum target, GLenum query, GLsizei bufSize, GLint *v) glGetnMapivARB;
    void function(GLenum map, GLsizei bufSize, GLfloat *values) glGetnPixelMapfvARB;
    void function(GLenum map, GLsizei bufSize, GLuint *values) glGetnPixelMapuivARB;
    void function(GLenum map, GLsizei bufSize, GLushort *values) glGetnPixelMapusvARB;
    void function(GLsizei bufSize, GLubyte *pattern) glGetnPolygonStippleARB;
    void function(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table) glGetnColorTableARB;
    void function(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image) glGetnConvolutionFilterARB;
    void function(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span) glGetnSeparableFilterARB;
    void function(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values) glGetnHistogramARB;
    void function(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values) glGetnMinmaxARB;
    void function(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img) glGetnTexImageARB;
    void function(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data) glReadnPixelsARB;
    void function(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img) glGetnCompressedTexImageARB;
    void function(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) glGetnUniformfvARB;
    void function(GLuint program, GLint location, GLsizei bufSize, GLint *params) glGetnUniformivARB;
    void function(GLuint program, GLint location, GLsizei bufSize, GLuint *params) glGetnUniformuivARB;
    void function(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) glGetnUniformdvARB;

    // ARB_shader_image_load_store
    void function(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) glBindImageTexture;
    void function(GLbitfield barriers) glMemoryBarrier;

    // ARB_draw_elements_base_vertex
    void function(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex) glDrawElementsBaseVertex;
    void function(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex) glDrawRangeElementsBaseVertex;
    void function(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount, GLint basevertex) glDrawElementsInstancedBaseVertex;
    void function(GLenum mode, const GLsizei *count, GLenum type, const GLvoid** indices, GLsizei drawcount, const GLint *basevertex) glMultiDrawElementsBaseVertex;

    // ARB_timer_query
    void function(GLuint id, GLenum target) glQueryCounter;
    void function(GLuint id, GLenum pname, GLint64 *params) glGetQueryObjecti64v;
    void function(GLuint id, GLenum pname, GLuint64 *params) glGetQueryObjectui64v;

    // ARB_get_program_binary
    void function(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary) glGetProgramBinary;
    void function(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length) glProgramBinary;
    void function(GLuint program, GLenum pname, GLint value) glProgramParameteri;

    // ARB_draw_buffers_blend
    void function(GLuint buf, GLenum mode) glBlendEquationiARB;
    void function(GLuint buf, GLenum modeRGB, GLenum modeAlpha) glBlendEquationSeparateiARB;
    void function(GLuint buf, GLenum src, GLenum dst) glBlendFunciARB;
    void function(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) glBlendFuncSeparateiARB;

    // ARB_tessellation_shader
    void function(GLenum pname, GLint value) glPatchParameteri;
    void function(GLenum pname, const GLfloat *values) glPatchParameterfv;

    // ARB_sync
    GLsync function(GLenum condition, GLbitfield flags) glFenceSync;
    GLboolean function(GLsync sync) glIsSync;
    void function(GLsync sync) glDeleteSync;
    GLenum function(GLsync sync, GLbitfield flags, GLuint64 timeout) glClientWaitSync;
    void function(GLsync sync, GLbitfield flags, GLuint64 timeout) glWaitSync;
    void function(GLenum pname, GLint64 *params) glGetInteger64v;
    void function(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) glGetSynciv;

    // ARB_draw_indirect
    void function(GLenum mode, const GLvoid *indirect) glDrawArraysIndirect;
    void function(GLenum mode, GLenum type, const GLvoid *indirect) glDrawElementsIndirect;

    // ARB_cl_event
    GLsync function(_cl_context * context, _cl_event * event, GLbitfield flags) glCreateSyncFromCLeventARB;

    // ARB_compute_shader
    void function(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) glDispatchCompute;
    void function(GLintptr indirect) glDispatchComputeIndirect;

    // ARB_internalformat_query
    void function(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) glGetInternalformativ;

    // ARB_blend_func_extended
    void function(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) glBindFragDataLocationIndexed;
    GLint function(GLuint program, const GLchar *name) glGetFragDataIndex;

    // ARB_provoking_vertex
    void function(GLenum mode) glProvokingVertex;

    // ARB_texture_multisample
    void function(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) glTexImage2DMultisample;
    void function(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) glTexImage3DMultisample;
    void function(GLenum pname, GLuint index, GLfloat *val) glGetMultisamplefv;
    void function(GLuint index, GLbitfield mask) glSampleMaski;

    // ARB_vertex_type_2_10_10_10_rev
    void function(GLenum type, GLuint value) glVertexP2ui;
    void function(GLenum type, const GLuint *value) glVertexP2uiv;
    void function(GLenum type, GLuint value) glVertexP3ui;
    void function(GLenum type, const GLuint *value) glVertexP3uiv;
    void function(GLenum type, GLuint value) glVertexP4ui;
    void function(GLenum type, const GLuint *value) glVertexP4uiv;
    void function(GLenum type, GLuint coords) glTexCoordP1ui;
    void function(GLenum type, const GLuint *coords) glTexCoordP1uiv;
    void function(GLenum type, GLuint coords) glTexCoordP2ui;
    void function(GLenum type, const GLuint *coords) glTexCoordP2uiv;
    void function(GLenum type, GLuint coords) glTexCoordP3ui;
    void function(GLenum type, const GLuint *coords) glTexCoordP3uiv;
    void function(GLenum type, GLuint coords) glTexCoordP4ui;
    void function(GLenum type, const GLuint *coords) glTexCoordP4uiv;
    void function(GLenum texture, GLenum type, GLuint coords) glMultiTexCoordP1ui;
    void function(GLenum texture, GLenum type, const GLuint *coords) glMultiTexCoordP1uiv;
    void function(GLenum texture, GLenum type, GLuint coords) glMultiTexCoordP2ui;
    void function(GLenum texture, GLenum type, const GLuint *coords) glMultiTexCoordP2uiv;
    void function(GLenum texture, GLenum type, GLuint coords) glMultiTexCoordP3ui;
    void function(GLenum texture, GLenum type, const GLuint *coords) glMultiTexCoordP3uiv;
    void function(GLenum texture, GLenum type, GLuint coords) glMultiTexCoordP4ui;
    void function(GLenum texture, GLenum type, const GLuint *coords) glMultiTexCoordP4uiv;
    void function(GLenum type, GLuint coords) glNormalP3ui;
    void function(GLenum type, const GLuint *coords) glNormalP3uiv;
    void function(GLenum type, GLuint color) glColorP3ui;
    void function(GLenum type, const GLuint *color) glColorP3uiv;
    void function(GLenum type, GLuint color) glColorP4ui;
    void function(GLenum type, const GLuint *color) glColorP4uiv;
    void function(GLenum type, GLuint color) glSecondaryColorP3ui;
    void function(GLenum type, const GLuint *color) glSecondaryColorP3uiv;
    void function(GLuint index, GLenum type, GLboolean normalized, GLuint value) glVertexAttribP1ui;
    void function(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) glVertexAttribP1uiv;
    void function(GLuint index, GLenum type, GLboolean normalized, GLuint value) glVertexAttribP2ui;
    void function(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) glVertexAttribP2uiv;
    void function(GLuint index, GLenum type, GLboolean normalized, GLuint value) glVertexAttribP3ui;
    void function(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) glVertexAttribP3uiv;
    void function(GLuint index, GLenum type, GLboolean normalized, GLuint value) glVertexAttribP4ui;
    void function(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) glVertexAttribP4uiv;

    // ARB_copy_buffer
    void function(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) glCopyBufferSubData;

    // ARB_transform_feedback2
    void function(GLenum target, GLuint id) glBindTransformFeedback;
    void function(GLsizei n, const GLuint *ids) glDeleteTransformFeedbacks;
    void function(GLsizei n, GLuint *ids) glGenTransformFeedbacks;
    GLboolean function(GLuint id) glIsTransformFeedback;
    void function() glPauseTransformFeedback;
    void function() glResumeTransformFeedback;
    void function(GLenum mode, GLuint id) glDrawTransformFeedback;

    // ARB_base_instance
    void function(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) glDrawArraysInstancedBaseInstance;
    void function(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) glDrawElementsInstancedBaseInstance;
    void function(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) glDrawElementsInstancedBaseVertexBaseInstance;

    // ARB_framebuffer_no_attachments
    void function(GLenum target, GLenum pname, GLint param) glFramebufferParameteri;
    void function(GLenum target, GLenum pname, GLint *params) glGetFramebufferParameteriv;
    void function(GLuint framebuffer, GLenum pname, GLint param) glNamedFramebufferParameteriEXT;
    void function(GLuint framebuffer, GLenum pname, GLint *params) glGetNamedFramebufferParameterivEXT;

    // ARB_transform_feedback3
    void function(GLenum mode, GLuint id, GLuint stream) glDrawTransformFeedbackStream;
    void function(GLenum target, GLuint index, GLuint id) glBeginQueryIndexed;
    void function(GLenum target, GLuint index) glEndQueryIndexed;
    void function(GLenum target, GLuint index, GLenum pname, GLint *params) glGetQueryIndexediv;

    // VERSION_4_0
    void function(GLfloat value) glMinSampleShading;
    void function(GLuint buf, GLenum mode) glBlendEquationi;
    void function(GLuint buf, GLenum modeRGB, GLenum modeAlpha) glBlendEquationSeparatei;
    void function(GLuint buf, GLenum src, GLenum dst) glBlendFunci;
    void function(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) glBlendFuncSeparatei;

    // ARB_transform_feedback_instanced
    void function(GLenum mode, GLuint id, GLsizei instancecount) glDrawTransformFeedbackInstanced;
    void function(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) glDrawTransformFeedbackStreamInstanced;

    // ARB_clear_buffer_object
    void function(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) glClearBufferData;
    void function(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) glClearBufferSubData;
    void function(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) glClearNamedBufferDataEXT;
    void function(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void *data) glClearNamedBufferSubDataEXT;

    // ARB_uniform_buffer_object
    void function(GLuint program, GLsizei uniformCount, const GLchar** uniformNames, GLuint *uniformIndices) glGetUniformIndices;
    void function(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) glGetActiveUniformsiv;
    void function(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) glGetActiveUniformName;
    GLuint function(GLuint program, const GLchar *uniformBlockName) glGetUniformBlockIndex;
    void function(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) glGetActiveUniformBlockiv;
    void function(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) glGetActiveUniformBlockName;
    void function(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) glUniformBlockBinding;

    // ARB_shader_subroutine
    GLint function(GLuint program, GLenum shadertype, const GLchar *name) glGetSubroutineUniformLocation;
    GLuint function(GLuint program, GLenum shadertype, const GLchar *name) glGetSubroutineIndex;
    void function(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) glGetActiveSubroutineUniformiv;
    void function(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) glGetActiveSubroutineUniformName;
    void function(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) glGetActiveSubroutineName;
    void function(GLenum shadertype, GLsizei count, const GLuint *indices) glUniformSubroutinesuiv;
    void function(GLenum shadertype, GLint location, GLuint *params) glGetUniformSubroutineuiv;
    void function(GLuint program, GLenum shadertype, GLenum pname, GLint *values) glGetProgramStageiv;

    // ARB_vertex_attrib_64bit
    void function(GLuint index, GLdouble x) glVertexAttribL1d;
    void function(GLuint index, GLdouble x, GLdouble y) glVertexAttribL2d;
    void function(GLuint index, GLdouble x, GLdouble y, GLdouble z) glVertexAttribL3d;
    void function(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) glVertexAttribL4d;
    void function(GLuint index, const GLdouble *v) glVertexAttribL1dv;
    void function(GLuint index, const GLdouble *v) glVertexAttribL2dv;
    void function(GLuint index, const GLdouble *v) glVertexAttribL3dv;
    void function(GLuint index, const GLdouble *v) glVertexAttribL4dv;
    void function(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) glVertexAttribLPointer;
    void function(GLuint index, GLenum pname, GLdouble *params) glGetVertexAttribLdv;

    // ARB_texture_storage
    void function(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) glTexStorage1D;
    void function(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) glTexStorage2D;
    void function(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) glTexStorage3D;
    void function(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) glTextureStorage1DEXT;
    void function(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) glTextureStorage2DEXT;
    void function(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) glTextureStorage3DEXT;

    // ARB_debug_output
    void function(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) glDebugMessageControlARB;
    void function(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) glDebugMessageInsertARB;
    void function(GLDEBUGPROCARB callback, const GLvoid *userParam) glDebugMessageCallbackARB;
    GLuint function(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) glGetDebugMessageLogARB;

    // ARB_program_interface_query
    void function(GLuint program, GLenum programInterface, GLenum pname, GLint *params) glGetProgramInterfaceiv;
    GLuint function(GLuint program, GLenum programInterface, const GLchar *name) glGetProgramResourceIndex;
    void function(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) glGetProgramResourceName;
    void function(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) glGetProgramResourceiv;
    GLint function(GLuint program, GLenum programInterface, const GLchar *name) glGetProgramResourceLocation;
    GLint function(GLuint program, GLenum programInterface, const GLchar *name) glGetProgramResourceLocationIndex;

    // VERSION_3_0
    void function(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) glColorMaski;
    void function(GLenum target, GLuint index, GLboolean *data) glGetBooleani_v;
    void function(GLenum target, GLuint index, GLint *data) glGetIntegeri_v;
    void function(GLenum target, GLuint index) glEnablei;
    void function(GLenum target, GLuint index) glDisablei;
    GLboolean function(GLenum target, GLuint index) glIsEnabledi;
    void function(GLenum primitiveMode) glBeginTransformFeedback;
    void function() glEndTransformFeedback;
    void function(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) glBindBufferRange;
    void function(GLenum target, GLuint index, GLuint buffer) glBindBufferBase;
    void function(GLuint program, GLsizei count, const GLchar** varyings, GLenum bufferMode) glTransformFeedbackVaryings;
    void function(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) glGetTransformFeedbackVarying;
    void function(GLenum target, GLenum clamp) glClampColor;
    void function(GLuint id, GLenum mode) glBeginConditionalRender;
    void function() glEndConditionalRender;
    void function(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) glVertexAttribIPointer;
    void function(GLuint index, GLenum pname, GLint *params) glGetVertexAttribIiv;
    void function(GLuint index, GLenum pname, GLuint *params) glGetVertexAttribIuiv;
    void function(GLuint index, GLint x) glVertexAttribI1i;
    void function(GLuint index, GLint x, GLint y) glVertexAttribI2i;
    void function(GLuint index, GLint x, GLint y, GLint z) glVertexAttribI3i;
    void function(GLuint index, GLint x, GLint y, GLint z, GLint w) glVertexAttribI4i;
    void function(GLuint index, GLuint x) glVertexAttribI1ui;
    void function(GLuint index, GLuint x, GLuint y) glVertexAttribI2ui;
    void function(GLuint index, GLuint x, GLuint y, GLuint z) glVertexAttribI3ui;
    void function(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) glVertexAttribI4ui;
    void function(GLuint index, const GLint *v) glVertexAttribI1iv;
    void function(GLuint index, const GLint *v) glVertexAttribI2iv;
    void function(GLuint index, const GLint *v) glVertexAttribI3iv;
    void function(GLuint index, const GLint *v) glVertexAttribI4iv;
    void function(GLuint index, const GLuint *v) glVertexAttribI1uiv;
    void function(GLuint index, const GLuint *v) glVertexAttribI2uiv;
    void function(GLuint index, const GLuint *v) glVertexAttribI3uiv;
    void function(GLuint index, const GLuint *v) glVertexAttribI4uiv;
    void function(GLuint index, const GLbyte *v) glVertexAttribI4bv;
    void function(GLuint index, const GLshort *v) glVertexAttribI4sv;
    void function(GLuint index, const GLubyte *v) glVertexAttribI4ubv;
    void function(GLuint index, const GLushort *v) glVertexAttribI4usv;
    void function(GLuint program, GLint location, GLuint *params) glGetUniformuiv;
    void function(GLuint program, GLuint color, const GLchar *name) glBindFragDataLocation;
    GLint function(GLuint program, const GLchar *name) glGetFragDataLocation;
    void function(GLint location, GLuint v0) glUniform1ui;
    void function(GLint location, GLuint v0, GLuint v1) glUniform2ui;
    void function(GLint location, GLuint v0, GLuint v1, GLuint v2) glUniform3ui;
    void function(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) glUniform4ui;
    void function(GLint location, GLsizei count, const GLuint *value) glUniform1uiv;
    void function(GLint location, GLsizei count, const GLuint *value) glUniform2uiv;
    void function(GLint location, GLsizei count, const GLuint *value) glUniform3uiv;
    void function(GLint location, GLsizei count, const GLuint *value) glUniform4uiv;
    void function(GLenum target, GLenum pname, const GLint *params) glTexParameterIiv;
    void function(GLenum target, GLenum pname, const GLuint *params) glTexParameterIuiv;
    void function(GLenum target, GLenum pname, GLint *params) glGetTexParameterIiv;
    void function(GLenum target, GLenum pname, GLuint *params) glGetTexParameterIuiv;
    void function(GLenum buffer, GLint drawbuffer, const GLint *value) glClearBufferiv;
    void function(GLenum buffer, GLint drawbuffer, const GLuint *value) glClearBufferuiv;
    void function(GLenum buffer, GLint drawbuffer, const GLfloat *value) glClearBufferfv;
    void function(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) glClearBufferfi;
    const( GLubyte *) function(GLenum name, GLuint index) glGetStringi;

    // ARB_vertex_array_object
    void function(GLuint array) glBindVertexArray;
    void function(GLsizei n, const GLuint *arrays) glDeleteVertexArrays;
    void function(GLsizei n, GLuint *arrays) glGenVertexArrays;
    GLboolean function(GLuint array) glIsVertexArray;

    // VERSION_3_1
    void function(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) glDrawArraysInstanced;
    void function(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount) glDrawElementsInstanced;
    void function(GLenum target, GLenum internalformat, GLuint buffer) glTexBuffer;
    void function(GLuint index) glPrimitiveRestartIndex;

    // ARB_texture_view
    void function(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) glTextureView;

    // VERSION_3_2
    void function(GLenum target, GLuint index, GLint64 *data) glGetInteger64i_v;
    void function(GLenum target, GLenum pname, GLint64 *params) glGetBufferParameteri64v;
    void function(GLenum target, GLenum attachment, GLuint texture, GLint level) glFramebufferTexture;

    // ARB_framebuffer_object
    GLboolean function(GLuint renderbuffer) glIsRenderbuffer;
    void function(GLenum target, GLuint renderbuffer) glBindRenderbuffer;
    void function(GLsizei n, const GLuint *renderbuffers) glDeleteRenderbuffers;
    void function(GLsizei n, GLuint *renderbuffers) glGenRenderbuffers;
    void function(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) glRenderbufferStorage;
    void function(GLenum target, GLenum pname, GLint *params) glGetRenderbufferParameteriv;
    GLboolean function(GLuint framebuffer) glIsFramebuffer;
    void function(GLenum target, GLuint framebuffer) glBindFramebuffer;
    void function(GLsizei n, const GLuint *framebuffers) glDeleteFramebuffers;
    void function(GLsizei n, GLuint *framebuffers) glGenFramebuffers;
    GLenum function(GLenum target) glCheckFramebufferStatus;
    void function(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) glFramebufferTexture1D;
    void function(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) glFramebufferTexture2D;
    void function(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) glFramebufferTexture3D;
    void function(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) glFramebufferRenderbuffer;
    void function(GLenum target, GLenum attachment, GLenum pname, GLint *params) glGetFramebufferAttachmentParameteriv;
    void function(GLenum target) glGenerateMipmap;
    void function(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) glBlitFramebuffer;
    void function(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) glRenderbufferStorageMultisample;
    void function(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) glFramebufferTextureLayer;

    // VERSION_3_3
    void function(GLuint index, GLuint divisor) glVertexAttribDivisor;

    // VERSION_2_0
    void function(GLenum modeRGB, GLenum modeAlpha) glBlendEquationSeparate;
    void function(GLsizei n, const GLenum *bufs) glDrawBuffers;
    void function(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) glStencilOpSeparate;
    void function(GLenum face, GLenum func, GLint refr, GLuint mask) glStencilFuncSeparate;
    void function(GLenum face, GLuint mask) glStencilMaskSeparate;
    void function(GLuint program, GLuint shader) glAttachShader;
    void function(GLuint program, GLuint index, const GLchar *name) glBindAttribLocation;
    void function(GLuint shader) glCompileShader;
    GLuint function() glCreateProgram;
    GLuint function(GLenum type) glCreateShader;
    void function(GLuint program) glDeleteProgram;
    void function(GLuint shader) glDeleteShader;
    void function(GLuint program, GLuint shader) glDetachShader;
    void function(GLuint index) glDisableVertexAttribArray;
    void function(GLuint index) glEnableVertexAttribArray;
    void function(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) glGetActiveAttrib;
    void function(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) glGetActiveUniform;
    void function(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj) glGetAttachedShaders;
    GLint function(GLuint program, const GLchar *name) glGetAttribLocation;
    void function(GLuint program, GLenum pname, GLint *params) glGetProgramiv;
    void function(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) glGetProgramInfoLog;
    void function(GLuint shader, GLenum pname, GLint *params) glGetShaderiv;
    void function(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) glGetShaderInfoLog;
    void function(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) glGetShaderSource;
    GLint function(GLuint program, const GLchar *name) glGetUniformLocation;
    void function(GLuint program, GLint location, GLfloat *params) glGetUniformfv;
    void function(GLuint program, GLint location, GLint *params) glGetUniformiv;
    void function(GLuint index, GLenum pname, GLdouble *params) glGetVertexAttribdv;
    void function(GLuint index, GLenum pname, GLfloat *params) glGetVertexAttribfv;
    void function(GLuint index, GLenum pname, GLint *params) glGetVertexAttribiv;
    void function(GLuint index, GLenum pname, GLvoid* *pointer) glGetVertexAttribPointerv;
    GLboolean function(GLuint program) glIsProgram;
    GLboolean function(GLuint shader) glIsShader;
    void function(GLuint program) glLinkProgram;
    void function(GLuint shader, GLsizei count, const GLchar** string, const GLint *length) glShaderSource;
    void function(GLuint program) glUseProgram;
    void function(GLint location, GLfloat v0) glUniform1f;
    void function(GLint location, GLfloat v0, GLfloat v1) glUniform2f;
    void function(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) glUniform3f;
    void function(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) glUniform4f;
    void function(GLint location, GLint v0) glUniform1i;
    void function(GLint location, GLint v0, GLint v1) glUniform2i;
    void function(GLint location, GLint v0, GLint v1, GLint v2) glUniform3i;
    void function(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) glUniform4i;
    void function(GLint location, GLsizei count, const GLfloat *value) glUniform1fv;
    void function(GLint location, GLsizei count, const GLfloat *value) glUniform2fv;
    void function(GLint location, GLsizei count, const GLfloat *value) glUniform3fv;
    void function(GLint location, GLsizei count, const GLfloat *value) glUniform4fv;
    void function(GLint location, GLsizei count, const GLint *value) glUniform1iv;
    void function(GLint location, GLsizei count, const GLint *value) glUniform2iv;
    void function(GLint location, GLsizei count, const GLint *value) glUniform3iv;
    void function(GLint location, GLsizei count, const GLint *value) glUniform4iv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix2fv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix3fv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix4fv;
    void function(GLuint program) glValidateProgram;
    void function(GLuint index, GLdouble x) glVertexAttrib1d;
    void function(GLuint index, const GLdouble *v) glVertexAttrib1dv;
    void function(GLuint index, GLfloat x) glVertexAttrib1f;
    void function(GLuint index, const GLfloat *v) glVertexAttrib1fv;
    void function(GLuint index, GLshort x) glVertexAttrib1s;
    void function(GLuint index, const GLshort *v) glVertexAttrib1sv;
    void function(GLuint index, GLdouble x, GLdouble y) glVertexAttrib2d;
    void function(GLuint index, const GLdouble *v) glVertexAttrib2dv;
    void function(GLuint index, GLfloat x, GLfloat y) glVertexAttrib2f;
    void function(GLuint index, const GLfloat *v) glVertexAttrib2fv;
    void function(GLuint index, GLshort x, GLshort y) glVertexAttrib2s;
    void function(GLuint index, const GLshort *v) glVertexAttrib2sv;
    void function(GLuint index, GLdouble x, GLdouble y, GLdouble z) glVertexAttrib3d;
    void function(GLuint index, const GLdouble *v) glVertexAttrib3dv;
    void function(GLuint index, GLfloat x, GLfloat y, GLfloat z) glVertexAttrib3f;
    void function(GLuint index, const GLfloat *v) glVertexAttrib3fv;
    void function(GLuint index, GLshort x, GLshort y, GLshort z) glVertexAttrib3s;
    void function(GLuint index, const GLshort *v) glVertexAttrib3sv;
    void function(GLuint index, const GLbyte *v) glVertexAttrib4Nbv;
    void function(GLuint index, const GLint *v) glVertexAttrib4Niv;
    void function(GLuint index, const GLshort *v) glVertexAttrib4Nsv;
    void function(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) glVertexAttrib4Nub;
    void function(GLuint index, const GLubyte *v) glVertexAttrib4Nubv;
    void function(GLuint index, const GLuint *v) glVertexAttrib4Nuiv;
    void function(GLuint index, const GLushort *v) glVertexAttrib4Nusv;
    void function(GLuint index, const GLbyte *v) glVertexAttrib4bv;
    void function(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) glVertexAttrib4d;
    void function(GLuint index, const GLdouble *v) glVertexAttrib4dv;
    void function(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) glVertexAttrib4f;
    void function(GLuint index, const GLfloat *v) glVertexAttrib4fv;
    void function(GLuint index, const GLint *v) glVertexAttrib4iv;
    void function(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) glVertexAttrib4s;
    void function(GLuint index, const GLshort *v) glVertexAttrib4sv;
    void function(GLuint index, const GLubyte *v) glVertexAttrib4ubv;
    void function(GLuint index, const GLuint *v) glVertexAttrib4uiv;
    void function(GLuint index, const GLushort *v) glVertexAttrib4usv;
    void function(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) glVertexAttribPointer;

    // ARB_map_buffer_range
    GLvoid* function(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) glMapBufferRange;
    void function(GLenum target, GLintptr offset, GLsizeiptr length) glFlushMappedBufferRange;

    // ARB_vertex_attrib_binding
    void function(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) glBindVertexBuffer;
    void function(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) glVertexAttribFormat;
    void function(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) glVertexAttribIFormat;
    void function(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) glVertexAttribLFormat;
    void function(GLuint attribindex, GLuint bindingindex) glVertexAttribBinding;
    void function(GLuint bindingindex, GLuint divisor) glVertexBindingDivisor;
    void function(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) glVertexArrayBindVertexBufferEXT;
    void function(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) glVertexArrayVertexAttribFormatEXT;
    void function(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) glVertexArrayVertexAttribIFormatEXT;
    void function(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) glVertexArrayVertexAttribLFormatEXT;
    void function(GLuint vaobj, GLuint attribindex, GLuint bindingindex) glVertexArrayVertexAttribBindingEXT;
    void function(GLuint vaobj, GLuint bindingindex, GLuint divisor) glVertexArrayVertexBindingDivisorEXT;

    // ARB_multi_draw_indirect
    void function(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) glMultiDrawArraysIndirect;
    void function(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) glMultiDrawElementsIndirect;

    // VERSION_2_1
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix2x3fv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix3x2fv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix2x4fv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix4x2fv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix3x4fv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) glUniformMatrix4x3fv;

    // ARB_sampler_objects
    void function(GLsizei count, GLuint *samplers) glGenSamplers;
    void function(GLsizei count, const GLuint *samplers) glDeleteSamplers;
    GLboolean function(GLuint sampler) glIsSampler;
    void function(GLuint unit, GLuint sampler) glBindSampler;
    void function(GLuint sampler, GLenum pname, GLint param) glSamplerParameteri;
    void function(GLuint sampler, GLenum pname, const GLint *param) glSamplerParameteriv;
    void function(GLuint sampler, GLenum pname, GLfloat param) glSamplerParameterf;
    void function(GLuint sampler, GLenum pname, const GLfloat *param) glSamplerParameterfv;
    void function(GLuint sampler, GLenum pname, const GLint *param) glSamplerParameterIiv;
    void function(GLuint sampler, GLenum pname, const GLuint *param) glSamplerParameterIuiv;
    void function(GLuint sampler, GLenum pname, GLint *params) glGetSamplerParameteriv;
    void function(GLuint sampler, GLenum pname, GLint *params) glGetSamplerParameterIiv;
    void function(GLuint sampler, GLenum pname, GLfloat *params) glGetSamplerParameterfv;
    void function(GLuint sampler, GLenum pname, GLuint *params) glGetSamplerParameterIuiv;

    // ARB_gpu_shader_fp64
    void function(GLint location, GLdouble x) glUniform1d;
    void function(GLint location, GLdouble x, GLdouble y) glUniform2d;
    void function(GLint location, GLdouble x, GLdouble y, GLdouble z) glUniform3d;
    void function(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) glUniform4d;
    void function(GLint location, GLsizei count, const GLdouble *value) glUniform1dv;
    void function(GLint location, GLsizei count, const GLdouble *value) glUniform2dv;
    void function(GLint location, GLsizei count, const GLdouble *value) glUniform3dv;
    void function(GLint location, GLsizei count, const GLdouble *value) glUniform4dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix2dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix3dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix4dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix2x3dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix2x4dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix3x2dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix3x4dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix4x2dv;
    void function(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) glUniformMatrix4x3dv;
    void function(GLuint program, GLint location, GLdouble *params) glGetUniformdv;

    // ARB_viewport_array
    void function(GLuint first, GLsizei count, const GLfloat *v) glViewportArrayv;
    void function(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) glViewportIndexedf;
    void function(GLuint index, const GLfloat *v) glViewportIndexedfv;
    void function(GLuint first, GLsizei count, const GLint *v) glScissorArrayv;
    void function(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) glScissorIndexed;
    void function(GLuint index, const GLint *v) glScissorIndexedv;
    void function(GLuint first, GLsizei count, const GLdouble *v) glDepthRangeArrayv;
    void function(GLuint index, GLdouble n, GLdouble f) glDepthRangeIndexed;
    void function(GLenum target, GLuint index, GLfloat *data) glGetFloati_v;
    void function(GLenum target, GLuint index, GLdouble *data) glGetDoublei_v;

    // ARB_shader_atomic_counters
    void function(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) glGetActiveAtomicCounterBufferiv;

    // VERSION_1_0
    void function(GLenum mode) glCullFace;
    void function(GLenum mode) glFrontFace;
    void function(GLenum target, GLenum mode) glHint;
    void function(GLfloat width) glLineWidth;
    void function(GLfloat size) glPointSize;
    void function(GLenum face, GLenum mode) glPolygonMode;
    void function(GLint x, GLint y, GLsizei width, GLsizei height) glScissor;
    void function(GLenum target, GLenum pname, GLfloat param) glTexParameterf;
    void function(GLenum target, GLenum pname, const GLfloat *params) glTexParameterfv;
    void function(GLenum target, GLenum pname, GLint param) glTexParameteri;
    void function(GLenum target, GLenum pname, const GLint *params) glTexParameteriv;
    void function(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) glTexImage1D;
    void function(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) glTexImage2D;
    void function(GLenum mode) glDrawBuffer;
    void function(GLbitfield mask) glClear;
    void function(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) glClearColor;
    void function(GLint s) glClearStencil;
    void function(GLdouble depth) glClearDepth;
    void function(GLuint mask) glStencilMask;
    void function(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) glColorMask;
    void function(GLboolean flag) glDepthMask;
    void function(GLenum cap) glDisable;
    void function(GLenum cap) glEnable;
    void function() glFinish;
    void function() glFlush;
    void function(GLenum sfactor, GLenum dfactor) glBlendFunc;
    void function(GLenum opcode) glLogicOp;
    void function(GLenum func, GLint refr, GLuint mask) glStencilFunc;
    void function(GLenum fail, GLenum zfail, GLenum zpass) glStencilOp;
    void function(GLenum func) glDepthFunc;
    void function(GLenum pname, GLfloat param) glPixelStoref;
    void function(GLenum pname, GLint param) glPixelStorei;
    void function(GLenum mode) glReadBuffer;
    void function(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) glReadPixels;
    void function(GLenum pname, GLboolean *params) glGetBooleanv;
    void function(GLenum pname, GLdouble *params) glGetDoublev;
    GLenum function() glGetError;
    void function(GLenum pname, GLfloat *params) glGetFloatv;
    void function(GLenum pname, GLint *params) glGetIntegerv;
    const( GLubyte *) function(GLenum name) glGetString;
    void function(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) glGetTexImage;
    void function(GLenum target, GLenum pname, GLfloat *params) glGetTexParameterfv;
    void function(GLenum target, GLenum pname, GLint *params) glGetTexParameteriv;
    void function(GLenum target, GLint level, GLenum pname, GLfloat *params) glGetTexLevelParameterfv;
    void function(GLenum target, GLint level, GLenum pname, GLint *params) glGetTexLevelParameteriv;
    GLboolean function(GLenum cap) glIsEnabled;
    void function(GLdouble near, GLdouble far) glDepthRange;
    void function(GLint x, GLint y, GLsizei width, GLsizei height) glViewport;

    // VERSION_1_1
    void function(GLenum mode, GLint first, GLsizei count) glDrawArrays;
    void function(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) glDrawElements;
    void function(GLenum pname, GLvoid* *params) glGetPointerv;
    void function(GLfloat factor, GLfloat units) glPolygonOffset;
    void function(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) glCopyTexImage1D;
    void function(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) glCopyTexImage2D;
    void function(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) glCopyTexSubImage1D;
    void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) glCopyTexSubImage2D;
    void function(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) glTexSubImage1D;
    void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) glTexSubImage2D;
    void function(GLenum target, GLuint texture) glBindTexture;
    void function(GLsizei n, const GLuint *textures) glDeleteTextures;
    void function(GLsizei n, GLuint *textures) glGenTextures;
    GLboolean function(GLuint texture) glIsTexture;

    // VERSION_1_2
    void function(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) glBlendColor;
    void function(GLenum mode) glBlendEquation;
    void function(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) glDrawRangeElements;
    void function(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) glTexImage3D;
    void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) glTexSubImage3D;
    void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) glCopyTexSubImage3D;

    // ARB_shader_storage_buffer_object
    void function(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) glShaderStorageBlockBinding;

    // VERSION_1_3
    void function(GLenum texture) glActiveTexture;
    void function(GLfloat value, GLboolean invert) glSampleCoverage;
    void function(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data) glCompressedTexImage3D;
    void function(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) glCompressedTexImage2D;
    void function(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data) glCompressedTexImage1D;
    void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) glCompressedTexSubImage3D;
    void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) glCompressedTexSubImage2D;
    void function(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data) glCompressedTexSubImage1D;
    void function(GLenum target, GLint level, GLvoid *img) glGetCompressedTexImage;

    // ARB_texture_storage_multisample
    void function(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) glTexStorage2DMultisample;
    void function(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) glTexStorage3DMultisample;
    void function(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) glTextureStorage2DMultisampleEXT;
    void function(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) glTextureStorage3DMultisampleEXT;
}
